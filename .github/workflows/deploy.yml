name: 🚀 Deploy to AWS Lambda Container

on:
  push:
    branches: [workflow]  # 또는 main
  workflow_dispatch:

env:
  REGION: ap-northeast-2
  FUNCTION_NAME: parkingauto_250707
  IMAGE_NAME: parking_auto_ecrrepo_2

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: 🧹 Clean Docker environment
      run: |
        export DOCKER_BUILDKIT=0
        docker system prune -af

    - name: 🔓 Login to Amazon ECR
      run: |
        ECR_URL="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}"
        aws ecr get-login-password --region ${{ env.REGION }} | docker login --username AWS --password-stdin $ECR_URL

    - name: 🛠 Build Docker image (linux/amd64)
      run: |
        export DOCKER_BUILDKIT=0
        ECR_URL="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}"
        docker build --platform linux/amd64 --no-cache -t ${{ env.IMAGE_NAME }}:latest .
        ARCH=$(docker inspect ${{ env.IMAGE_NAME }}:latest --format '{{.Architecture}}')
        echo "빌드된 이미지 아키텍처: $ARCH"
        if [ "$ARCH" != "amd64" ]; then
          echo "❌ 잘못된 아키텍처: $ARCH (amd64 필요)"
          echo "STATUS=Build Failed" >> $GITHUB_ENV
          exit 1
        fi
        docker tag ${{ env.IMAGE_NAME }}:latest $ECR_URL:latest

    - name: 📤 Push to Amazon ECR
      run: |
        ECR_URL="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}"
        docker push $ECR_URL:latest

    - name: ⏳ Lambda 함수 상태 확인
      run: |
        STATUS=$(aws lambda get-function --function-name ${{ env.FUNCTION_NAME }} --region ${{ env.REGION }} --query 'Configuration.LastUpdateStatus' --output text)
        echo "현재 Lambda 함수 상태: $STATUS"
        while [ "$STATUS" = "InProgress" ]; do
          sleep 10
          STATUS=$(aws lambda get-function --function-name ${{ env.FUNCTION_NAME }} --region ${{ env.REGION }} --query 'Configuration.LastUpdateStatus' --output text)
        done

    - name: 🔄 Update Lambda function
      run: |
        ECR_URL="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}"
        aws lambda update-function-code \
          --function-name ${{ env.FUNCTION_NAME }} \
          --image-uri $ECR_URL:latest \
          --region ${{ env.REGION }} \
          --architectures "x86_64"

    - name: ⏳ Lambda 함수 업데이트 완료 대기
      run: |
        for i in {1..30}; do
          STATUS=$(aws lambda get-function --function-name ${{ env.FUNCTION_NAME }} --region ${{ env.REGION }} --query 'Configuration.LastUpdateStatus' --output text)
          if [ "$STATUS" = "Successful" ]; then
            echo "✅ Lambda 함수 업데이트 성공!"
            echo "STATUS=Successful" >> $GITHUB_ENV
            break
          elif [ "$STATUS" = "Failed" ]; then
            echo "❌ Lambda 함수 업데이트 실패!"
            echo "STATUS=Failed" >> $GITHUB_ENV
            exit 1
          else
            sleep 10
          fi
        done

    - name: 🧪 Lambda 함수 테스트
      run: |
        aws lambda invoke \
          --function-name ${{ env.FUNCTION_NAME }} \
          --region ${{ env.REGION }} \
          --payload '{}' \
          response.json
        if grep -q "errorMessage" response.json; then
          echo "❌ Lambda 함수 실행 중 오류 발생"
          echo "STATUS=Test Failed" >> $GITHUB_ENV
          cat response.json
          exit 1
        else
          echo "✅ Lambda 함수 테스트 성공!"
        fi

    - name: 📊 배포 결과 요약
      if: always()
      run: |
        echo "📊 ===== 배포 결과 요약 ====="
        echo "🏷️  이미지: ${{ env.IMAGE_NAME }}"
        echo "🚀 함수: ${{ env.FUNCTION_NAME }}"
        echo "🌍 리전: ${{ env.REGION }}"
        echo "📅 배포 시간: $(date)"
        STATUS=$(aws lambda get-function --function-name ${{ env.FUNCTION_NAME }} --region ${{ env.REGION }} --query 'Configuration.LastUpdateStatus' --output text 2>/dev/null || echo "Unknown")
        echo "최종 상태: $STATUS"
        echo "STATUS=$STATUS" >> $GITHUB_ENV

    - name: 📣 Slack Notification
      if: always()
      uses: slackapi/slack-github-action@v1.26.0
      with:
        payload: |
          {
            "text": ":rocket: *AWS Lambda 배포 결과 알림*\n*결과*: `${{ env.STATUS }}`\n함수명: `${{ env.FUNCTION_NAME }}`\n리전: `${{ env.REGION }}`\n이미지: `${{ env.IMAGE_NAME }}`\n*GitHub Workflow*: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|여기서 자세히 보기>"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}