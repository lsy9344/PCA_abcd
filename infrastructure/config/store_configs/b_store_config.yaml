# B매장 설정 (실제 테스트 검증 완료)
store:
  id: "B"
  name: "B매장"
  website_url: "https://a15878.parkingweb.kr/login"
  
login:
  username: "215"
  password: "4318"

# 쿠폰 설정 - 시간 독립적 설계 (4_discount_logic.mdc 기반)
# B 매장 특징: 30분 단위 유료 쿠폰, 주말 전용 쿠폰 없음 (PAID로 fallback)
coupons:
  FREE_COUPON:
    name: "무료 1시간할인"
    type: "FREE"
    duration_minutes: 60
    priority: 0
  PAID_COUPON:
    name: "유료 30분할인 (판매 : 300 )"
    type: "PAID"
    duration_minutes: 30  # B매장 특징: 30분 단위
    priority: 1
  # WEEKEND 타입 쿠폰 없음 → 주말에도 PAID 타입 사용 (fallback)

# 할인 정책 - 시간 기반 (분 단위)
discount_policy:
  weekday:
    target_hours: 3
    max_coupons: 5
  weekend:
    target_hours: 2
    max_coupons: 3

# 웹 셀렉터 (백업 크롤러에서 검증된 정확한 셀렉터)
selectors:
  # 로그인 관련 - 백업 크롤러에서 사용하는 get_by_role 방식
  login:
    username_input: 'role=textbox[name="ID"]'  # line 35: get_by_role('textbox', name='ID')
    password_input: 'role=textbox[name="PASSWORD"]'  # line 36: get_by_role('textbox', name='PASSWORD')
    login_button: 'role=button[name="Submit"]'  # line 37: get_by_role('button', name='Submit')
    login_success_indicator: 'role=textbox[name="차량번호"]'  # line 45: get_by_role('textbox', name='차량번호')
    search_state_checkbox: '#checkSaveID'  # line 189: 검색 상태 유지 체크박스
  
  # 팝업 처리 - 백업 크롤러에서 검증된 셀렉터
  popups:
    notice_popup: 'text=안내'  # line 176: 안내 팝업
    ok_button: 'text=OK'  # line 177: 일반 OK 버튼
    modal_ok_button: '.modal-buttons a:has-text("OK")'  # line 319: 쿠폰 적용 후 모달 팝업
  
  # 차량 검색 - 실제 HTML 구조 및 로직 구조 (스크린샷 2025-08-24 확인)
  search:
    # 차량번호 입력 필드 HTML 구조
    car_number_input:
      primary_selector: '#schCarNo'           # id="schCarNo" (메인 셀렉터)
      alternative_selectors:                  # 대체 셀렉터들 (우선순위 순)
        - 'input[name="carNo"]'              # name="carNo"
        - 'input.gInput'                     # class="gInput"
        - 'input[placeholder="차량번호"]'     # placeholder 기반
      html_attributes:
        id: "schCarNo"
        name: "carNo" 
        class: "gInput"
        type: "text"
        placeholder: "차량번호"
        style: "width: 100px;"
        autocomplete: "off"
        hasDatepicker: "true"
        onkeypress: "javascript: if (event.keyCode == 13) {fncDoListMst();};"
      
    # 검색 버튼 HTML 구조 (input 태그 사용 - 스크린샷 2025-08-24 14:43 확인)
    search_button:
      primary_selector: 'input[type="button"].btnS1_1.btn'  # input type="button" class="btnS1_1 btn" (메인 셀렉터)
      alternative_selectors:                  # 대체 셀렉터들 (우선순위 순)
        - 'input[type="button"][value="검색"]'
        - 'input.btnS1_1'
        - '.btnS1_1.btn'
        - 'input[onclick*="fncDoListMst"]'
      html_attributes:
        tag: "input"                          # button이 아니라 input 태그
        type: "button"
        class: "btnS1_1 btn"
        value: "검색"
        onclick: "javascript:fncDoListMst();" # 정확한 함수명
      
    # 검색 로직 구조
    search_logic:
      # 1단계: 입력 필드 준비 확인
      input_preparation:
        wait_for_visible: 10000              # 10초 대기
        wait_for_attached: 5000              # 5초 대기
        clear_before_input: true             # 입력 전 기존 값 클리어
        clear_wait_time: 500                 # 클리어 후 대기 시간(ms)
        
      # 2단계: 차량번호 입력
      input_process:
        primary_method: "fill"               # 기본 입력 방법
        fallback_method: "type"              # 실패 시 대체 방법
        type_delay: 100                      # 타이핑 딜레이(ms)
        verification_required: true          # 입력 후 검증 필요
        retry_on_failure: true               # 실패 시 재시도
        
      # 3단계: 검색 버튼 클릭
      button_click:
        wait_for_visible: 10000              # 버튼 표시 대기
        check_enabled: true                  # 활성화 상태 확인
        disabled_wait_time: 2000             # 비활성화 시 대기 시간
        post_click_wait: 2000                # 클릭 후 기본 대기
        additional_wait_iterations: 6         # 추가 대기 반복 횟수
        additional_wait_interval: 500        # 각 반복 간격(ms)
        
      # 4단계: 검색 결과 대기 및 확인
      result_verification:
        base_wait_time: 2000                 # 기본 결과 대기 시간
        max_additional_wait: 3000            # 최대 추가 대기 시간
        success_indicators:                  # 성공 지표들
          - "할인내역이 표시됨"
          - "쿠폰 적용 버튼들 표시됨"
        failure_indicators:                  # 실패 지표들
          - "검색 결과가 없습니다"
          - "검색된 차량이 없습니다"
          - "출차된 차량은 검색되지 않습니다"
    
    # 검색 실패 메시지 (기존 유지)
    no_result_message: 'text=검색 결과가 없습니다'  # line 78-79: 검색 결과 없음 패턴
    no_result_message2: 'text=검색된 차량이 없습니다'  # line 79: 추가 패턴
  
  # 쿠폰 관련 - 백업 크롤러에서 검증된 셀렉터
  coupons:
    free_1hour_link: 'a:has-text("무료 1시간할인")'  # line 293: 무료 1시간할인 링크
    paid_30min_link: 'a:has-text("유료 30분할인")'  # line 293: 유료 30분할인 링크
    remaining_amount: 'text=남은잔여량'  # line 223: 남은잔여량 텍스트
    
    # 할인내역 테이블 셀렉터 (2025-08-16 파싱 문제 해결로 업데이트)
    # 우선순위 순으로 시도 - 공통 쿠폰 계산기에서 사용
    discount_selectors:
      - "tr.ev_dhx_skyblue"     # B 매장 기본 행 (짝수)
      - "tr.odd_dhx_skyblue"    # B 매장 홀수 행  
      - "tr.rowselected"        # 선택된 행
      - "#gridDtl tr"           # 할인내역 그리드 내 행
      - ".gridbox tr"           # 그리드박스 내 행
    
    # 쿠폰 이름 → 키 매핑 (공통 쿠폰 계산기용)
    coupon_key_mapping:
      "무료 1시간할인": "FREE_COUPON"
      "유료 30분할인": "PAID_COUPON"
    
    # B 매장 테이블 데이터 구조 정보
    table_structure:
      description: "번호 | 할인값 | 등록자 | 등록일"
      coupon_name_cell_index: 1  # 쿠폰명이 있는 셀 인덱스 (0부터 시작)
      quantity_per_row: 1        # B 매장은 항상 행당 1개 쿠폰
      example: "1 | 유료 30분할인 | 215(이수열) | 2025-08-16 08:59:07.977"
  
  # 페이지 URL
  urls:
    login: "/login"
    discount_registration: "/discount/registration"
    discount_status: "/state/doViewMst"
    discount_purchase: "/pay/doViewDscnt"

# 차량 검색 실패 감지 설정
search_failure_detection:
  # 우선순위 순으로 시도할 감지 방법들
  methods:
    - type: "text_pattern"           # B매장 주요 패턴
      patterns: 
        - "검색 결과가 없습니다. 출차된 차량은 검색되지 않습니다."
        - "검색 결과가 없습니다"
        - "검색된 차량이 없습니다"
        - "차량을 찾을 수 없습니다"
        - "등록된 차량이 없습니다"
      priority: 1
      
    - type: "locator_check"          # Playwright 로케이터 직접 사용
      locators:
        - 'text="검색 결과가 없습니다. 출차된 차량은 검색되지 않습니다."'
        - 'text="검색 결과가 없습니다"'
        - 'text="검색된 차량이 없습니다"'
      priority: 2
      
    - type: "popup_detection"        # 팝업창 감지
      selectors:
        - ".modal"
        - ".popup"
        - "div[role='dialog']"
      text_patterns: ["검색", "결과", "없음", "차량"]
      priority: 3

  # 팝업 닫기 설정
  popup_close:
    selectors:
      - 'text=OK'
      - 'text=확인'
      - 'text=닫기'
      - 'button:has-text("OK")'
      - 'button:has-text("확인")'
      - '.btn-close'

# 차량 검색 실패 알림 설정
search_failure_notification:
  enabled: true
  message: "[B매장] 차량 검색 실패 알림\n\n차량번호: {vehicle_number}\n검색 결과: 등록된 차량이 없습니다\n\n※ 차량이 출차되었거나 번호를 다시 확인해주세요."