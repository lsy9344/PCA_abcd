# C매장 설정
store:
  id: "C"
  name: "C매장"
  website_url: "http://g048.gparking.kr"

login:
  username: "1024"
  password: "1211"
  
# 로그인 정보는 .env 파일에서 관리
# C_STORE_USERNAME, C_STORE_PASSWORD 환경 변수 사용

# 쿠폰 설정 (디스카운트 로직 문서 기준)
coupons:
  FREE_2HOUR:
    name: "2시간 무료할인권"
    type: "FREE"  # 대문자 표준화
    duration_minutes: 120
    priority: 0
  PAID_1HOUR:
    name: "1시간 유료할인권"
    type: "PAID"  # 대문자 표준화
    duration_minutes: 60
    priority: 1

# 할인 정책 (분 단위로 표준화)
discount_policy:
  weekday:
    target_hours: 3
    max_coupons: 5
  weekend:
    target_hours: 2
    max_coupons: 3

# 웹 셀렉터 (스크린샷 확인 후 업데이트)
selectors:
  # 로그인 관련
  login:
    username_input: "#user_id"
    password_input: "#pwd"
    login_button: ".btn"
    car_number_input: "input[placeholder='차량번호 2자리 이상을 입력하세요']"
  
  # 팝업 처리
  popups:
    notice_popup: ".popup"
    ok_button: ".popup-ok"
    close_button: ".popup-close"
    # 할인권적용 팝업 (쿠폰 적용 후 발생)
    discount_apply_popup:
      - 'a:has-text("닫기")'
      - 'button:has-text("닫기")'
      - 'text=닫기'
      - 'a[href*="close"]'
      - '.close-modal'
  
  # 차량 검색
  search:
    car_number_input: "input[placeholder='차량번호 2자리 이상을 입력하세요']"
    search_button: ".btn:has-text('차량조회')"
    no_result_message: 'text=검색된 차량이 없습니다'
    search_result_table: "#tableID"  # 스크린샷에서 확인된 실제 테이블 ID (camelCase)
    vehicle_click_selector: "td:has-text('{car_number}')"  # 차량번호 클릭 셀렉터
  
  # 쿠폰 관련
  coupons:
    # ⚠️ 주의: C 매장은 특수한 쿠폰 적용 구조를 가짐
    # 실제 쿠폰 적용: insert_discount() JavaScript 함수 호출 링크
    # 할인 이력 관리: tbody[id='discountlist'] 테이블
    
    # 🎯 실제 쿠폰 적용 링크 셀렉터 (2025-08-21 확인됨)
    coupon_application_selectors:
      - "a[href*='insert_discount']"      # 핵심: insert_discount 함수 호출 링크만
      - "a[onclick*='insert_discount']"   # onclick 속성에서도 확인
      - "*[onclick*='insert_discount']"   # 모든 요소에서 onclick 확인
    
    # ❌ 혼동하지 말 것: 할인 이력 삭제 링크
    discount_deletion_selectors:
      - "a[href*='deldiscount']"          # 삭제 함수 (적용 X)
      - "a.delete"                        # 삭제 버튼 클래스 (적용 X)
    
    # 📊 할인내역 테이블 셀렉터 (이력 조회용 - 적용 용도 아님)
    # 2025-08-21 테스트 검증: tbody[id='discountlist'] 구조 확인됨
    discount_selectors:
      - "tbody[id='discountlist'] tr"  # C 매장 할인내역 테이블 (메인)
      - "#discountlist tr"             # ID만으로 접근 (백업)
      - "tbody#discountlist tr"        # tbody 명시 (백업)
    
    # 🔍 할인 이력 파싱 규칙 (공통 쿠폰 계산기 연동)
    history_parsing:
      table_identification: "tbody[id='discountlist']"  # 고유 식별자
      cell_structure:
        0: "삭제_링크"     # <a href="javascript:deldiscount(...)">삭제</a>
        1: "적용_날짜"     # "2025-08-21 02:17:39"
        2: "쿠폰명"        # "1시간 유료할인권"  
        3: "수량"         # "1매"
      quantity_extraction: "r'(\\d+)'"  # 정규식: "1매" → 1
      
    # 📋 실제 테스트 결과 (2025-08-21)
    verified_history_data:
      example_row: "삭제 | 2025-08-21 02:17:39 | 1시간 유료할인권 | 1매"
      parsed_result: {"PAID_1HOUR": 1}
    
    # 🎫 쿠폰 우선순위 적용 규칙 (2025-08-21 구현)
    priority_rules:
      description: "무료 쿠폰 우선, 시간이 긴 것부터"
      order:
        1: "2시간 무료할인권"  # 최우선
        2: "1시간 무료할인권"
        3: "2시간 유료할인권"  
        4: "1시간 유료할인권"  # 최후순위
    
    # 🔗 실제 확인된 링크 구조 (2025-08-21 테스트됨)
    verified_links:
      "1시간 무료할인권": "javascript:insert_discount(328304,246);"
      "2시간 무료할인권": "javascript:insert_discount(328304,247);"
    
    # 🗂️ 쿠폰 이름 → 키 매핑 (공통 쿠폰 계산기용)
    coupon_key_mapping:
      "2시간 무료할인권": "FREE_2HOUR"
      "무료 2시간할인": "FREE_2HOUR"
      "1시간 무료할인권": "FREE_1HOUR"  # 추가됨
      "무료 1시간할인": "FREE_1HOUR"    # 추가됨
      "1시간 유료할인권": "PAID_1HOUR"
      "유료할인권": "PAID_1HOUR"
      "유료할인": "PAID_1HOUR"
    
    # 📋 C 매장 테이블 데이터 구조 정보 (할인 이력용)
    table_structure:
      description: "삭제링크 | 날짜 | 할인권명 | 수량"
      coupon_name_cell_index: 2  # 쿠폰명이 있는 셀 인덱스 (0부터 시작)
      quantity_cell_index: 3     # 수량이 있는 셀 인덱스
      has_my_history: false      # C 매장은 my_history가 없음 (total_history만)
      example: "삭제 | 2025-08-21 02:17:39 | 1시간 유료할인권 | 1매"
    
  # 페이지 URL (추정)
  urls:
    login: "/login"
    main: "/main"
    coupon: "/coupon"

# 차량 검색 실패 감지 설정
search_failure_detection:
  # 우선순위 순으로 시도할 감지 방법들
  methods:
    - type: "text_pattern"           # C매장 주요 패턴
      patterns: 
        - "검색된 차량이 없습니다"
        - "검색 결과가 없습니다"
        - "차량을 찾을 수 없습니다"
        - "등록된 차량이 없습니다"
        - "조회 결과가 없습니다"
      priority: 1
      
    - type: "locator_check"          # Playwright 로케이터 직접 사용
      locators:
        - 'text="검색된 차량이 없습니다"'
        - 'text="검색 결과가 없습니다"'
        - 'text="조회 결과가 없습니다"'
      priority: 2
      
    - type: "popup_detection"        # 팝업창 감지
      selectors:
        - ".popup"
        - ".modal"
        - ".alert"
        - "div[id*='popup']"
      text_patterns: ["검색", "결과", "없음", "차량", "조회"]
      priority: 3
      
    - type: "table_check"            # 테이블 기반 감지 (C매장 특화)
      selector: "#tableID"
      empty_indicators: ["데이터가 없습니다", "조회된 결과가 없습니다"]
      priority: 4

  # 팝업 닫기 설정
  popup_close:
    selectors:
      - 'text=OK'
      - 'text=확인'
      - 'text=닫기'
      - 'button:has-text("OK")'
      - 'button:has-text("확인")'
      - 'a:has-text("닫기")'
      - '.popup-ok'
      - '.popup-close'
      - '.btn-close'
      - '.close-modal'
      - 'a[href*="close"]'