---
title: "주요 시나리오 및 예외 케이스"
order: 12
category: "implementation"
alwaysApply: true
tags: ["scenarios", "workflow", "exceptions"]
lastUpdated: "2024-01-15"
description: "주차 할인권 자동화의 전체 동작 흐름과 예외 상황 처리"
---

# 주요 기능/업무 시나리오

이 문서는 주차 할인권 자동화 프로그램이 Playwright를 사용하여 어떻게 업무를 자동화하는지, 전체 동작 흐름과 각 단계를 설명합니다.

---

## 전체 시나리오 요약

1. **자동화 시작**
   - 프로그램 실행(명령줄, 스케줄러, 서버 등에서)

2. **웹사이트 접속**
   - Playwright로 브라우저(Chrome 등) 실행 후, 주차장 사이트 진입

3. **초기 팝업 처리**
   - 인트로/공지/튜토리얼 등 다양한 팝업 자동 닫기
   - (여러 셀렉터, ESC, '닫기' 텍스트 등으로 처리)

4. **로그인**
   - ID, 비밀번호 입력
   - 로그인 버튼 클릭
   - 로그인 성공 여부 체크(특정 요소가 보이는지 확인)

5. **차량번호 검색/선택**
   - 차량번호 입력 후, 검색 버튼 클릭
   - "검색된 차량이 없습니다" 메시지 체크(있으면 종료)
   - "차량 선택" 버튼(사이트별로 다름) 클릭

6. **할인권/쿠폰 정보 파악**
   - 보유 할인권, 매장 할인 내역, 전체 할인 내역 테이블에서 각 쿠폰 개수 추출
   - Playwright의 table/text 추출 기능 활용

7. **쿠폰 적용 비즈니스 로직 실행**
   - 평일/주말/공휴일에 따라 적용할 쿠폰 개수 계산
   - 적용 필요시 각 쿠폰별 '적용' 버튼 반복 클릭(Playwright로)

8. **결과/로그 기록**
   - 적용 성공/실패, 각 단계별 로그 남기기
   - 결과 로그를 파일/DB/Slack 등 원하는 곳에 저장·전송

9. **브라우저 종료 및 프로그램 마무리**
   - 모든 자동화 작업 종료 후 브라우저 닫기, 로그 저장

---

## 각 단계별 세부 설명

### 1. 자동화 시작  
- 입력 데이터(차량번호, 매장명 등) 준비
- 명령줄, 예약실행, 서버 스케줄러 등에서 프로그램 실행

### 2. 웹사이트 접속  
- Playwright로 실제 브라우저 실행(headless/headful)
- 주차장 사이트 URL 오픈

### 3. 초기 팝업 처리  
- `#skip`, `#popupCancel`, ESC, '닫기' 텍스트 등으로 모든 팝업 닫기 시도
- 팝업이 없어도 에러 없이 다음 단계로

### 4. 로그인  
- 아이디 입력란(`#id`), 비밀번호 입력란(`#password`)에 정보 입력
- 로그인 버튼(`#login`) 클릭
- 로그인 성공(차량번호 입력란(`#carNumber`) 보임 여부 등) 확인

### 5. 차량번호 검색/선택  
- 차량번호 입력 후, 검색 버튼 클릭
- "검색된 차량이 없습니다" 메시지 체크(있으면 종료)
- "차량 선택" 버튼(사이트별로 다름) 클릭

### 6. 할인권/쿠폰 정보 파악  
- 보유 할인권, 매장 할인 내역, 전체 할인 내역 테이블에서 각 쿠폰 개수 추출
- Playwright의 table/text 추출 기능 활용

### 7. 쿠폰 적용 로직  
- 날짜(평일/주말/공휴일) 및 현황에 따라 쿠폰 개수 계산
- 필요한 만큼 각 쿠폰별 '적용' 버튼 찾아 클릭
- "확인", "적용되었습니다" 등의 팝업도 자동 클릭

### 8. 결과/로그 기록  
- 각 단계의 성공/실패, 적용 쿠폰 결과 등 로그 남김
- 파일/DB/텔레그램 등으로 결과 저장/전송 가능

### 9. 종료  
- 브라우저 정상 종료
- 최종 로그 및 상태 출력

---

## 주요 시나리오 및 예외 케이스

## 1. 기본 정상 시나리오

-   **목표**: 각 매장별 정책에 따라, 정해진 시간만큼의 할인을 정상적으로 적용한다.

### 시나리오 1-1: A 매장 - 평일 (3시간 할인)

-   **조건**: 평일, 대상 차량에 적용된 쿠폰이 없음, 타 매장 포함 전체 무료 쿠폰 사용 내역 없음.
-   **사용 쿠폰**: `1시간 무료 쿠폰`, `1시간 유료 쿠폰`
-   **실행 순서**:
    1.  `AStore`의 `get_coupon_history` 실행 -> `my_history`와 `total_history`가 모두 비어있음을 확인.
    2.  `ADiscountRule`의 `decide_coupon_to_apply` 실행.
    3.  **결과**: `{ '1시간 무료 쿠폰': 1, '1시간 유료 쿠폰': 2 }` 반환.
    4.  `AStore`의 `apply_coupons`가 위 결과에 따라 쿠폰 2종을 순서대로 적용.

### 시나리오 1-2: B 매장 - 주말 (2시간 할인)

-   **조건**: 주말, 대상 차량에 적용된 쿠폰이 없음.
-   **사용 쿠폰**: `1시간 주말 쿠폰`
-   **실행 순서**:
    1.  `BStore`의 `get_coupon_history` 실행 -> `my_history`가 비어있음을 확인. (B매장은 `total_history` 개념이 없을 수 있음)
    2.  `BDiscountRule`의 `decide_coupon_to_apply` 실행.
    3.  **결과**: `{ '1시간 주말 쿠폰': 2 }` 반환. (B매장 규칙에 따름)
    4.  `BStore`의 `apply_coupons`가 위 결과에 따라 쿠폰을 적용.

---

## 2. 예외 케이스

### 2-1: 차량번호 검색 실패

-   **조건**: 차량번호 입력 후, 검색 버튼 클릭 시 "검색된 차량이 없습니다" 메시지 출력.
-   **실행 순서**:
    1.  "검색된 차량이 없습니다" 메시지 확인.
    2.  프로그램 종료.

### 2-2: 로그인 실패

-   **조건**: 아이디 또는 비밀번호가 잘못되었을 때.
-   **실행 순서**:
    1.  로그인 실패 메시지 확인.
    2.  프로그램 종료.

### 2-3: 쿠폰 적용 실패

-   **조건**: 쿠폰 적용 중 오류 발생.
-   **실행 순서**:
    1.  오류 메시지 확인.
    2.  프로그램 종료.

### 2-4: 브라우저 종료 실패

-   **조건**: 브라우저 종료 중 오류 발생.
-   **실행 순서**:
    1.  오류 메시지 확인.
    2.  프로그램 종료.

---

## (참고)
- 각 단계는 Playwright의 `page.locator`, `page.click`, `page.fill`, `page.wait_for_selector` 등으로 제어
- 셀렉터/테이블 구조, 쿠폰명 등은 20_selectors.mdc에서 별도 관리