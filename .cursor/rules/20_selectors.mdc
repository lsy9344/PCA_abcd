---
title: "웹 셀렉터 관리 정책 및 매장별 구조"
order: 20
category: "implementation"
alwaysApply: false
tags: ["selectors", "html", "playwright", "web"]
lastUpdated: "2024-01-15"
description: "Playwright 자동화에서 사용하는 HTML 셀렉터 관리 정책"
---

# 사이트 구조 및 셀렉터 요약표

이 문서는 Playwright 자동화에서 사용하는  
핵심 HTML 요소(셀렉터)와 구조를 한눈에 정리한 표입니다.  
이 표를 기반으로 Playwright 스크립트에서 각 기능을 쉽게 구현할 수 있습니다.

---

## A 사이트 주요 기능별 셀렉터 정리

| 단계        | 기능 설명                | 셀렉터/타입                | 비고                  |
|-------------|-------------------------|----------------------------|-----------------------|
| 1           | 인트로 팝업 닫기        | `#skip` (ID)               | 버튼                  |
| 2           | 공지 팝업 닫기          | `#popupCancel` (ID)        | 버튼                  |
| 3           | 튜토리얼/기타 팝업 닫기 | ESC, `//*[contains(text(), '닫기')]` (XPATH) | 여러 팝업 대응        |
| 4           | 아이디 입력             | `#id` (ID)                 | 텍스트 입력           |
| 5           | 비밀번호 입력           | `#password` (ID)           | 텍스트 입력           |
| 6           | 로그인 버튼             | `#login` (ID)              | 버튼                  |
| 7           | 로그인 후 안내 팝업 닫기| `#gohome` (ID)             | 버튼                  |
| 8           | 차량번호 입력           | `#carNumber` (ID)          | 텍스트 입력           |
| 9           | 차량 검색 버튼          | `button[name="search"]` (NAME), `.btn-search` (CLASS), `button:has-text("검색")` | 여러 방식 대응 |
| 10          | 차량 선택 버튼          | `#next` (ID), `button:has-text("차량 선택")` | 텍스트/ID 대응      |
| 11          | 보유 할인권 테이블      | `#productList tr` (ID + TR) | 할인권 정보           |
| 12          | 매장 할인 이력 테이블   | `tbody#myDcList tr` (ID + TR)| 내역 추출            |
| 13          | 전체 할인 이력 테이블   | `#allDcList tr` (ID + TR)   | 내역 추출             |
| 14          | 쿠폰 적용 버튼          | `button:has-text("적용")` (텍스트), 또는 각 행 내부 | tr 내 버튼 반복      |
| 15          | 확인/완료 팝업 버튼     | `button:has-text("확인")` (텍스트) | 적용 확인/완료      |

---

## 셀렉터 사용 예시 (Playwright 코드)

```python
# 팝업 닫기
await page.click("#skip")
await page.click("#popupCancel")
await page.keyboard.press("Escape")
await page.locator('button:has-text("닫기")').click()

# 로그인
await page.fill("#id", "아이디")
await page.fill("#password", "비밀번호")
await page.click("#login")

# 차량 검색
await page.fill("#carNumber", "123가4567")
await page.click('button[name="search"]')

# 차량 선택
await page.click("#next")
# 또는
await page.locator('button:has-text("차량 선택")').click()

# 할인권 정보 추출 (테이블 반복)
rows = await page.locator("#productList tr").all()
for row in rows:
    text = await row.inner_text()
    # 필요한 정보 파싱

# 쿠폰 적용
await page.locator('button:has-text("적용")').click()

# 팝업 확인
await page.locator('button:has-text("확인")').click()
```

---

## 셀렉터 관리 정책

### 1. 기본 원칙

-   **매장별 완전 분리**: **모든 셀렉터는 매장별로 다르다.** A 매장과 B 매장의 웹사이트는 HTML 구조가 전혀 다르므로, 셀렉터를 공유하려는 시도는 절대 금지된다.
-   **설정 파일 집중 관리**: 모든 셀렉터는 매장별 설정 파일에 그룹화하여 정의한다. 코드 안에 셀렉터 문자열을 하드코딩하는 것을 금지한다.
-   **구체적이고 안정적인 셀렉터 사용**: `id`가 가장 안정적이며, 없을 경우 `name`, `class` 순으로 사용한다. 동적으로 변하는 `class` 이름은 피하고, 텍스트 기반 셀렉터(`:has-text("텍스트")`)는 최후의 수단으로 사용한다.

### 2. 셀렉터 설정 구조

```yaml
# store_config.yaml 예시
selectors:
  login:
    username_input: "#id"
    password_input: "#password"
    login_button: "#login"
  search:
    car_number_input: "#carNumber"
    search_button: "button[name='search']"
    search_result_table: "#tableID"
  coupon:
    product_list: "#productList tr"
    my_discount_list: "#myDcList tr"
    total_discount_list: "#allDcList tr"
    apply_button: "button:has-text('적용')"
```

---

## B 매장 할인내역 테이블 구조

### 🏪 B 매장 HTML 구조 특징
B 매장은 다른 매장과 다른 고유한 HTML 구조를 가지고 있습니다.

#### **테이블 구조**
- **테이블 ID**: 없음 (클래스 기반 식별)
- **행 클래스**: `tr.ev_dhx_skyblue` (짝수 행), `tr.odd_dhx_skyblue` (홀수 행)
- **데이터 구조**: `번호 | 할인값 | 등록자 | 등록일`

#### **셀렉터 우선순위**
```yaml
# B 매장 할인내역 테이블 셀렉터 (우선순위 순)
discount_selectors:
  - "tr.ev_dhx_skyblue"     # 기본 행 (짝수)
  - "tr.odd_dhx_skyblue"    # 홀수 행
  - "tr.rowselected"        # 선택된 행
  - "#gridDtl tr"           # 그리드 컨테이너 내 행
  - ".gridbox tr"           # 그리드박스 내 행
```

#### **쿠폰 매핑**
```yaml
# B 매장 쿠폰 이름 → 키 매핑
coupon_key_mapping:
  "무료 1시간할인": "FREE_COUPON"
  "유료 30분할인": "PAID_COUPON"
```

#### **데이터 파싱 예시**
```
실제 행 데이터: "1 | 유료 30분할인 | 215(이수열) | 2025-08-16 08:59:07.977"
파싱 결과: cell_texts[1] = "유료 30분할인" → PAID_COUPON
```

---

## 매장별 HTML 구조 비교표

### 🆚 A vs B vs C 매장 구조 차이점

| 항목 | A 매장 | B 매장 | C 매장 |
|------|--------|--------|--------|
| **테이블 ID** | `#myDcList`, `#allDcList` | 없음 (클래스 기반) | `tbody[id='discountlist']` |
| **행 클래스** | 일반 `tr` | `tr.ev_dhx_skyblue`, `tr.odd_dhx_skyblue` | 일반 `tr` |
| **쿠폰명 위치** | cell[2] (할인권명) | cell[1] (할인값) | cell[2] (할인권명) |
| **수량 위치** | cell[3] (수량) | 없음 (항상 1개) | cell[3] (수량) |
| **데이터 예시** | `날짜 \| 할인권명 \| 수량` | `번호 \| 할인값 \| 등록자 \| 등록일` | `빈값 \| 날짜 \| 할인권명 \| 수량` |

### 🔧 공통 계산기 매장 감지 로직

```python
# 매장별 구조 자동 감지 (shared/utils/common_coupon_calculator.py)
if any(name in cell_texts[1] for name in ["무료 1시간할인", "유료 30분할인", "무료", "유료"]):
    # B매장 패턴: 2번째 칼럼에 쿠폰명
    coupon_cell = cell_texts[1]
    quantity = 1  # B매장은 항상 1개씩
    
elif any(name in cell_texts[2] for name in ["무료", "유료", "할인권"]):
    # A/C매장 패턴: 3번째 칼럼에 쿠폰명
    coupon_cell = cell_texts[2]
    quantity_cell = cell_texts[3]
    # 수량 숫자 추출 ("1매" -> 1)
    quantity_match = re.search(r'(\d+)', quantity_cell)
    quantity = int(quantity_match.group(1)) if quantity_match else 1
```

---

## C 매장 쿠폰 적용 구조 상세 분석

### 🎯 C 매장 HTML 구조의 핵심 특징
C 매장은 다른 매장들과 완전히 다른 쿠폰 적용 메커니즘을 사용합니다.

#### 🔍 실제 HTML 구조 분석 결과
```html
<!-- ✅ 실제 쿠폰 적용 링크들 -->
<a href="javascript:insert_discount(328304,246);" class="btn btn-active">1시간 무료할인권</a>
<a href="javascript:insert_discount(328304,247);" class="btn btn-active">2시간 무료할인권</a>

<!-- ❌ 할인 이력 삭제 링크 (혼동 주의!) -->
<a href="javascript:deldiscount('165312');" class="delete">삭제</a>
```

#### 🚨 중요한 구분 사항
1. **적용 가능한 쿠폰**: `insert_discount()` 함수를 호출하는 링크들
2. **할인 이력**: `deldiscount()` 함수를 호출하는 삭제 링크들 (혼동하면 안됨!)
3. **이력 조회**: `./discountlist` 등 페이지 이동 링크들

### 🔧 C 매장 쿠폰 탐지 로직

#### ✅ 올바른 쿠폰 링크 탐지 셀렉터
```python
# 실제 적용 가능한 쿠폰만 탐지
coupon_link_selectors = [
    "a[href*='insert_discount']",     # insert_discount 함수를 호출하는 링크들
    "a[onclick*='insert_discount']",  # onclick에 insert_discount가 있는 링크들  
    "*[onclick*='insert_discount']",  # onclick에 insert_discount가 있는 모든 요소
]
```

#### ❌ 잘못된 탐지 방법들 (피해야 할 패턴)
```python
# ❌ 너무 포괄적 - 할인 이력도 포함됨
"a:has-text('할인')"
"*:has-text('쿠폰')"
"table tr:has(td)"

# ❌ 삭제 버튼과 혼동
"a:has-text('삭제')"
"a[href*='deldiscount']"
```

### 📋 C 매장 완전 셀렉터 가이드

| 목적 | 올바른 셀렉터 | 잘못된 셀렉터 | 비고 |
|------|---------------|---------------|------|
| **쿠폰 적용** | `a[href*='insert_discount']` | `a:has-text('할인')` | insert_discount만 탐지 |
| **할인 이력** | `tbody[id='discountlist'] tr` | `table tr:has(td)` | 특정 테이블만 |
| **이력 삭제** | `a[href*='deldiscount']` | `a:has-text('삭제')` | 삭제 함수 호출 링크 |

### 🎯 쿠폰 우선순위 적용 규칙

#### 무료 쿠폰 우선 적용 로직
```python
def _sort_coupons_by_priority(self, coupons: dict) -> list:
    """C 매장 쿠폰 우선순위: 무료 → 유료, 긴시간 → 짧은시간"""
    def coupon_priority(item):
        coupon_name = item[0]
        
        # 무료 쿠폰이 최우선
        if '무료' in coupon_name:
            priority = 0
            if '2시간' in coupon_name: priority -= 20  # 2시간 무료 최우선
            elif '1시간' in coupon_name: priority -= 10
        else:
            # 유료 쿠폰은 나중에
            priority = 100
            if '2시간' in coupon_name: priority -= 20
            elif '1시간' in coupon_name: priority -= 10
        
        return priority
    
    return sorted(coupons.items(), key=coupon_priority)
```

### 🔍 실제 크롤링 구현 코드
```python
async def _find_coupon_rows(self):
    """C 매장 전용: insert_discount 링크 탐지"""
    coupon_link_selectors = [
        "a[href*='insert_discount']",
        "a[onclick*='insert_discount']", 
        "*[onclick*='insert_discount']",
    ]
    
    for selector in coupon_link_selectors:
        links = await self.page.locator(selector).all()
        for link in links:
            link_text = await link.inner_text()
            link_href = await link.get_attribute('href') or ""
            
            # 쿠폰 관련 텍스트가 포함된 링크들만 선택
            if any(keyword in link_text for keyword in ['무료', '유료', '할인권', '쿠폰']):
                coupon_info = {
                    'link': link,
                    'text': link_text, 
                    'href': link_href
                }
                coupon_rows.append(coupon_info)
```

### 🚨 C 매장 크롤링 시 주의사항

1. **할인 이력과 혼동 금지**: `tbody[id='discountlist']`의 삭제 버튼은 이미 적용된 쿠폰의 삭제 버튼임
2. **JavaScript 함수 구분**: `insert_discount` (적용) vs `deldiscount` (삭제) 명확히 구분
3. **무료 쿠폰 우선**: 항상 무료 쿠폰부터 적용하고, 시간이 긴 것을 우선
4. **링크 클릭 방식**: 버튼이 아닌 JavaScript 함수를 호출하는 링크 클릭

### 📊 C 매장 할인 이력 조회 구조

#### 🗂️ 할인 이력 테이블 특징
- **테이블 식별**: `tbody[id='discountlist']` (고유 ID 기반)
- **데이터 구조**: `삭제링크 | 날짜 | 할인권명 | 수량`
- **실제 예시**: `삭제 | 2025-08-21 02:17:39 | 1시간 유료할인권 | 1매`

#### 🔍 이력 조회 셀렉터
```python
# C 매장 할인 이력 조회 전용 셀렉터
discount_history_selectors = [
    "tbody[id='discountlist'] tr",  # 메인 셀렉터
    "#discountlist tr",             # 백업 셀렉터
    "tbody#discountlist tr",        # 명시적 셀렉터
]
```

#### 📋 이력 파싱 로직 예시
```python
async def parse_discount_history(self):
    """C 매장 할인 이력 파싱"""
    for selector in discount_history_selectors:
        rows = await self.page.locator(selector).all()
        for row in rows:
            cells = await row.locator('td').all()
            if len(cells) >= 4:
                # C 매장 구조: [0]삭제링크 [1]날짜 [2]쿠폰명 [3]수량
                date = (await cells[1].inner_text()).strip()
                coupon_name = (await cells[2].inner_text()).strip()  
                quantity_text = (await cells[3].inner_text()).strip()
                
                # 수량 추출: "1매" → 1
                quantity_match = re.search(r'(\d+)', quantity_text)
                quantity = int(quantity_match.group(1)) if quantity_match else 1
                
                # 쿠폰 키 매핑
                for mapped_name, coupon_key in coupon_key_mapping.items():
                    if mapped_name in coupon_name:
                        total_history[coupon_key] = total_history.get(coupon_key, 0) + quantity
                        break
```

#### ⚠️ 이력 조회 vs 쿠폰 적용 구분
| 목적 | 테이블/영역 | 셀렉터 | 데이터 형태 |
|------|-------------|---------|-------------|
| **이력 조회** | `tbody[id='discountlist']` | `tbody[id='discountlist'] tr` | 이미 적용된 쿠폰 목록 |
| **쿠폰 적용** | 적용 가능한 쿠폰 영역 | `a[href*='insert_discount']` | 적용 가능한 쿠폰 링크들 |

### 📊 C 매장 테스트 결과 로그 예시

#### 이력 조회 로그
```
🔍 현재 적용된 쿠폰 파싱 시작...
📊 총 발견된 행 수: 1개
📊 할인 내역 테이블 발견: 총 1개 행
📝 행 1: 삭제 | 2025-08-21 02:17:39 | 1시간 유료할인권 | 1매
📋 사용 이력: {'PAID_1HOUR': 1}
```

#### 쿠폰 적용 로그  
```
[디버그] 'a[href*='insert_discount']' 패턴으로 발견된 링크 수: 2
[디버그] 링크 1: '1시간 유료할인권' - href: javascript:insert_discount(328304,246);
[디버그] 링크 2: '2시간 무료할인권' - href: javascript:insert_discount(328304,247);
[우선순위] 쿠폰 적용 순서: ['2시간 무료할인권']  # 무료 쿠폰 우선
[성공] 2시간 무료할인권 링크 클릭 완료
[완료] C 쿠폰 적용 완료: 총 1개
```

---

## 참고사항

- 사이트 구조 변경 시, 셀렉터(특히 버튼/테이블/팝업 등)는 항상 최신화 필요
- Playwright의 locator, click, fill, keyboard.press 등은 모든 셀렉터 조합에 사용할 수 있음
- 동적 UI(비동기 로딩 등)는 `await page.wait_for_selector(...)`로 처리 권장

---

이 문서는 새로운 매장을 추가하거나 기존 매장의 웹사이트 UI가 변경되었을 때, 셀렉터를 어떻게 수정하고 관리해야 하는지에 대한 가이드라인을 제공한다.