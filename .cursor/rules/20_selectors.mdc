---
title: "웹 셀렉터 관리 정책 및 매장별 구조"
order: 20
category: "implementation"
alwaysApply: false
tags: ["selectors", "html", "playwright", "web"]
lastUpdated: "2024-01-15"
description: "Playwright 자동화에서 사용하는 HTML 셀렉터 관리 정책"
---

# 사이트 구조 및 셀렉터 요약표

이 문서는 Playwright 자동화에서 사용하는  
핵심 HTML 요소(셀렉터)와 구조를 한눈에 정리한 표입니다.  
이 표를 기반으로 Playwright 스크립트에서 각 기능을 쉽게 구현할 수 있습니다.

---

## A 사이트 주요 기능별 셀렉터 정리

| 단계        | 기능 설명                | 셀렉터/타입                | 비고                  |
|-------------|-------------------------|----------------------------|-----------------------|
| 1           | 인트로 팝업 닫기        | `#skip` (ID)               | 버튼                  |
| 2           | 공지 팝업 닫기          | `#popupCancel` (ID)        | 버튼                  |
| 3           | 튜토리얼/기타 팝업 닫기 | ESC, `//*[contains(text(), '닫기')]` (XPATH) | 여러 팝업 대응        |
| 4           | 아이디 입력             | `#id` (ID)                 | 텍스트 입력           |
| 5           | 비밀번호 입력           | `#password` (ID)           | 텍스트 입력           |
| 6           | 로그인 버튼             | `#login` (ID)              | 버튼                  |
| 7           | 로그인 후 안내 팝업 닫기| `#gohome` (ID)             | 버튼                  |
| 8           | 차량번호 입력           | `#carNumber` (ID)          | 텍스트 입력           |
| 9           | 차량 검색 버튼          | `button[name="search"]` (NAME), `.btn-search` (CLASS), `button:has-text("검색")` | 여러 방식 대응 |
| 10          | 차량 선택 버튼          | `#next` (ID), `button:has-text("차량 선택")` | 텍스트/ID 대응      |
| 11          | 보유 할인권 테이블      | `#productList tr` (ID + TR) | 할인권 정보           |
| 12          | 매장 할인 이력 테이블   | `tbody#myDcList tr` (ID + TR)| 내역 추출            |
| 13          | 전체 할인 이력 테이블   | `#allDcList tr` (ID + TR)   | 내역 추출             |
| 14          | 쿠폰 적용 버튼          | `button:has-text("적용")` (텍스트), 또는 각 행 내부 | tr 내 버튼 반복      |
| 15          | 확인/완료 팝업 버튼     | `button:has-text("확인")` (텍스트) | 적용 확인/완료      |

---

## 셀렉터 사용 예시 (Playwright 코드)

```python
# 팝업 닫기
await page.click("#skip")
await page.click("#popupCancel")
await page.keyboard.press("Escape")
await page.locator('button:has-text("닫기")').click()

# 로그인
await page.fill("#id", "아이디")
await page.fill("#password", "비밀번호")
await page.click("#login")

# 차량 검색
await page.fill("#carNumber", "123가4567")
await page.click('button[name="search"]')

# 차량 선택
await page.click("#next")
# 또는
await page.locator('button:has-text("차량 선택")').click()

# 할인권 정보 추출 (테이블 반복)
rows = await page.locator("#productList tr").all()
for row in rows:
    text = await row.inner_text()
    # 필요한 정보 파싱

# 쿠폰 적용
await page.locator('button:has-text("적용")').click()

# 팝업 확인
await page.locator('button:has-text("확인")').click()
```

---

## 셀렉터 관리 정책

### 1. 기본 원칙

-   **매장별 완전 분리**: **모든 셀렉터는 매장별로 다르다.** A 매장과 B 매장의 웹사이트는 HTML 구조가 전혀 다르므로, 셀렉터를 공유하려는 시도는 절대 금지된다.
-   **설정 파일 집중 관리**: 모든 셀렉터는 매장별 설정 파일에 그룹화하여 정의한다. 코드 안에 셀렉터 문자열을 하드코딩하는 것을 금지한다.
-   **구체적이고 안정적인 셀렉터 사용**: `id`가 가장 안정적이며, 없을 경우 `name`, `class` 순으로 사용한다. 동적으로 변하는 `class` 이름은 피하고, 텍스트 기반 셀렉터(`:has-text("텍스트")`)는 최후의 수단으로 사용한다.

### 2. 셀렉터 설정 구조

```yaml
# store_config.yaml 예시
selectors:
  login:
    username_input: "#id"
    password_input: "#password"
    login_button: "#login"
  search:
    car_number_input: "#carNumber"
    search_button: "button[name='search']"
    search_result_table: "#tableID"
  coupon:
    product_list: "#productList tr"
    my_discount_list: "#myDcList tr"
    total_discount_list: "#allDcList tr"
    apply_button: "button:has-text('적용')"
```

---

## C 매장 쿠폰 링크 판별 규칙

### 🎯 C 매장 쿠폰 링크 특징
C 매장에서는 실제 쿠폰 적용 링크와 할인 내역 조회 링크를 명확히 구분해야 합니다.

#### ✅ 실제 쿠폰 적용 링크 (적용해야 하는 링크)
- **패턴**: `href="javascript:insert_discount(매개변수1,매개변수2)"`
- **예시**: 
  - `javascript:insert_discount(328304,246)` → "1시간 유료할인권"
  - `javascript:insert_discount(328304,247)` → "2시간 무료할인권"
- **판별 조건**: `href.startswith('javascript:insert_discount')`

#### ❌ 할인 내역 조회 링크 (제외해야 하는 링크)
- **패턴**: `href="./discountlist"` 또는 기타 페이지 이동 링크
- **예시**: `./discountlist` → "할인등록현황" (관리 페이지)
- **판별 조건**: JavaScript 함수가 아닌 일반 페이지 링크

#### 🔧 올바른 쿠폰 링크 판별 코드
```python
# ✅ 올바른 C 매장 쿠폰 링크 판별
if href and href.startswith('javascript:insert_discount'):
    coupon_links.append((text.strip(), href))

# ❌ 잘못된 판별 (너무 포괄적)
if href and 'discount' in href.lower():
    coupon_links.append((text.strip(), href))  # 할인등록현황도 포함됨
```

### 📋 C 매장 셀렉터 요약

| 기능 | 셀렉터 | 설명 |
|------|--------|------|
| 실제 쿠폰 적용 | `a[href^="javascript:insert_discount"]` | JavaScript 함수 호출 링크만 선택 |
| 할인 내역 조회 | `a[href="./discountlist"]` | 페이지 이동 링크 (제외) |
| 쿠폰 삭제 | `a[href^="javascript:deldiscount"]` | 삭제 함수 (필요시) |

---

## 참고사항

- 사이트 구조 변경 시, 셀렉터(특히 버튼/테이블/팝업 등)는 항상 최신화 필요
- Playwright의 locator, click, fill, keyboard.press 등은 모든 셀렉터 조합에 사용할 수 있음
- 동적 UI(비동기 로딩 등)는 `await page.wait_for_selector(...)`로 처리 권장

---

이 문서는 새로운 매장을 추가하거나 기존 매장의 웹사이트 UI가 변경되었을 때, 셀렉터를 어떻게 수정하고 관리해야 하는지에 대한 가이드라인을 제공한다.