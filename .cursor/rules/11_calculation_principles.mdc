---
title: "쿠폰 계산 핵심 원칙 및 검증 가이드"
order: 11
category: "implementation"
alwaysApply: true
tags: ["calculation", "validation", "principles", "core"]
lastUpdated: "2024-01-15"
description: "쿠폰 계산 시 절대 원칙과 AI 실수 방지 검증 체크리스트"
---

# 쿠폰 계산 핵심 원칙 및 검증 가이드

> **⚠️ 이 문서는 쿠폰 계산 로직의 절대 원칙을 정의합니다. AI와 개발자 모두 반드시 준수해야 합니다.**

---

## 🎯 **핵심 원칙 1: 전체 시간 고려 원칙**

### **절대 원칙**
```
부족분 = 목표시간 - (기존무료 + 기존유료 + 추가무료)
```

### **올바른 계산 흐름**
1. **목표 시간 설정**: 평일 180분, 주말 120분
2. **현재 적용된 시간 계산**: 기존 무료 + 기존 유료 (분 단위)
3. **남은 시간 계산**: 목표 - 현재 적용된 시간
4. **추가 무료 쿠폰 적용** (조건에 따라)
5. **최종 부족분 계산**: 남은 시간 - 추가 무료 시간
6. **유료 쿠폰으로 부족분 채우기**

---

## 🚨 **AI 실수 방지 체크리스트**

### **❌ 절대 하지 말아야 할 계산**
```python
# ❌ 잘못된 계산 - 단순 곱셈 금지
needed_paid = (target_hours - free_hours) * coupon_count

# ❌ 잘못된 계산 - 기존 적용 시간 무시
needed_paid = target_hours - 1  # 무료 1개만 고려

# ❌ 잘못된 계산 - 시간 단위 혼동
remaining_hours = target_minutes - existing_hours  # 단위 불일치
```

### **✅ 올바른 계산 패턴**
```python
# ✅ 올바른 계산 - 모든 시간을 분 단위로 통일
target_minutes = 180  # 평일 3시간
existing_minutes = existing_free_count * 60 + existing_paid_count * 60
remaining_minutes = max(0, target_minutes - existing_minutes)

# ✅ 추가 무료 쿠폰 적용 (조건 확인 후)
if can_apply_free and remaining_minutes >= 60:
    additional_free = 1
    remaining_minutes -= 60
else:
    additional_free = 0

# ✅ 유료 쿠폰으로 나머지 채우기
needed_paid = math.ceil(remaining_minutes / 60)  # 올림 처리
```

---

## 📊 **실제 계산 예시 (검증용)**

### **시나리오 1: A 매장 평일 (목표 3시간)**
```python
# 입력
target_minutes = 180  # 3시간
existing_free = 0     # 기존 무료 쿠폰 없음
existing_paid = 1     # 기존 1시간 유료 쿠폰 있음

# 계산 과정
current_applied = existing_free * 60 + existing_paid * 60  # 60분
remaining = target_minutes - current_applied              # 120분
additional_free = 1 if remaining >= 60 else 0            # 1개 (60분)
final_remaining = remaining - additional_free * 60        # 60분
needed_paid = math.ceil(final_remaining / 60)            # 1개

# 결과
{"FREE_1HOUR": 1, "PAID_1HOUR": 1}  # 총 180분 달성
```

### **시나리오 2: C 매장 주말 (목표 2시간, 2시간 무료쿠폰)**
```python
# 입력
target_minutes = 120  # 2시간
existing_free_2h = 0  # 기존 2시간 무료 쿠폰 없음
existing_paid = 0     # 기존 유료 쿠폰 없음

# 계산 과정
current_applied = existing_free_2h * 120 + existing_paid * 60  # 0분
remaining = target_minutes - current_applied                   # 120분
additional_free_2h = 1 if remaining >= 120 else 0            # 1개 (120분)
final_remaining = remaining - additional_free_2h * 120        # 0분
needed_paid = math.ceil(final_remaining / 60) if final_remaining > 0 else 0  # 0개

# 결과
{"FREE_2HOUR": 1, "PAID_1HOUR": 0}  # 총 120분 달성
```

---

## 🔍 **매장별 특수 규칙 처리**

### **A 매장: 표준 1시간 기준**
- 무료: 1시간 × 1개 = 60분
- 유료: 1시간 × N개 = 60N분
- 계산: `math.ceil(remaining_minutes / 60)`

### **B 매장: 30분 유료 쿠폰 보정**
```python
# B 매장 특수 계산
base_paid_needed = math.ceil(remaining_minutes / 60)  # 1시간 기준
actual_paid_needed = base_paid_needed * 2             # 30분 쿠폰이므로 2배
```

### **C 매장: 2시간 무료 쿠폰**
- 무료: 2시간 × 1개 = 120분
- 유료: 1시간 × N개 = 60N분
- 특별히 다른 계산 불필요 (duration_minutes 설정으로 자동 처리)

---

## 🧪 **검증 테스트 케이스**

### **필수 검증 항목**
```python
def validate_calculation(target_minutes, existing_coupons, result_coupons):
    """계산 결과 검증"""
    
    # 1. 시간 단위 일치 확인
    assert isinstance(target_minutes, int), "목표 시간은 분 단위 정수여야 함"
    
    # 2. 총 적용 시간 계산
    total_applied = 0
    for coupon_type, count in result_coupons.items():
        duration = get_coupon_duration(coupon_type)  # 쿠폰별 시간 가져오기
        total_applied += count * duration
    
    # 3. 목표 시간 달성 확인
    assert total_applied >= target_minutes, f"목표 미달성: {total_applied} < {target_minutes}"
    
    # 4. 과도한 초과 방지 (1시간 이내 초과만 허용)
    assert total_applied - target_minutes <= 60, f"과도한 초과: {total_applied - target_minutes}분"
    
    # 5. 무료 쿠폰 1개 제한 확인
    free_count = sum(count for coupon_type, count in result_coupons.items() 
                    if 'FREE' in coupon_type)
    assert free_count <= 1, f"무료 쿠폰 초과 사용: {free_count}개"
    
    return True
```

### **실패 패턴 감지**
```python
# ❌ 이런 결과가 나오면 계산 오류
{"FREE_1HOUR": 2, "PAID_1HOUR": 1}  # 무료 쿠폰 2개 (불가능)
{"FREE_1HOUR": 0, "PAID_1HOUR": 5}  # 무료 쿠폰 미사용 (비효율)
{"FREE_1HOUR": 1, "PAID_1HOUR": 10} # 과도한 초과 (6시간 초과)
```

---

## 🎯 **개발자 체크리스트**

### **코드 작성 시 필수 확인**
- [ ] 모든 시간 계산을 분 단위로 통일했는가?
- [ ] 기존 적용된 쿠폰 시간을 올바르게 차감했는가?
- [ ] 무료 쿠폰 적용 조건을 확인했는가?
- [ ] 유료 쿠폰 개수를 올림(ceil) 처리했는가?
- [ ] 매장별 특수 규칙을 적용했는가?

### **테스트 시 필수 확인**
- [ ] 목표 시간을 정확히 달성하는가?
- [ ] 무료 쿠폰을 1개만 사용하는가?
- [ ] 과도한 시간 초과가 없는가? (60분 이내)
- [ ] Edge Case 처리가 올바른가? (이미 목표 달성한 경우 등)

---

## 🚨 **재발 방지 원칙**

### **AI 개발 시 주의사항**
1. **단순 곱셈 계산 금지**: `target_hours * coupon_count` 형태 절대 금지
2. **시간 단위 혼동 방지**: 모든 계산을 분 단위로 통일
3. **기존 쿠폰 고려**: 현재 적용된 쿠폰을 반드시 차감
4. **올림 처리**: 부족분을 쿠폰 개수로 변환 시 `math.ceil()` 사용

### **코드 리뷰 체크포인트**
- 계산 로직에 하드코딩된 숫자가 있는가?
- 모든 분기에서 목표 시간을 달성하는가?
- 예외 상황(이미 달성, 무료 쿠폰 사용 불가 등) 처리가 올바른가?

---

**이 원칙들을 철저히 준수하여 정확하고 일관된 쿠폰 계산 로직을 구현하세요!**