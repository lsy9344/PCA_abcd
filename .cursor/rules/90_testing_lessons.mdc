---
title: "매장 테스트 실무 가이드"
order: 90
category: "guide"
alwaysApply: true
tags: ["testing", "qa", "validation", "procedures"]
lastUpdated: "2025-08-19"
description: "매장 개발/수정 후 테스트 절차 및 검증 기준"
---

# 매장 테스트 실무 가이드

## 🎯 목적

매장 개발/수정 후 체계적인 테스트를 통해 품질을 보장하고, 프로덕션 배포 전 모든 문제를 사전에 발견하는 것을 목표로 합니다.

> **💡 종합 문제 해결**: 복잡한 통합 문제는 `92_store_integration_troubleshooting.mdc` 참조

---

## 🚀 테스트 단계별 절차

### **1단계: 개발 환경 준비**

#### **코드 수정 후 필수 절차**
```bash
# 순서가 중요합니다!
1. ✅ 코드 수정 완료
2. ✅ 기존 서버 프로세스 종료 (중요!)
3. ✅ 새 서버 시작
4. ✅ 테스트 실행
5. ✅ 결과 검증
```

#### **환경 설정 확인**
```bash
□ config 파일 업데이트 확인
□ 환경 변수 설정 확인
□ 종속성 패키지 설치 확인
□ 브라우저 드라이버 상태 확인
```

---

### **2단계: 기본 기능 테스트**

#### **CLI 경로 테스트**
```bash
# 기본 실행 테스트
python interfaces/cli/main.py --store [매장ID] --vehicle [차량번호]

# 예시
python interfaces/cli/main.py --store A --vehicle 1234
```

#### **CLI 테스트 성공 기준**
```bash
□ 정상 완료 (예외 없이 종료)
□ cleanup 메서드 실행 확인
□ 브라우저 리소스 정리 완료
□ Unicode 에러 없음
□ 적절한 로그 출력
```

---

### **3단계: 서버 통합 테스트**

#### **서버 시작 및 테스트**
```bash
# 서버 재시작 (필수!)
서버 프로세스 종료 → 새 서버 시작

# 웹훅 테스트 실행
웹훅 호출 또는 서버 API 테스트
```

#### **서버 테스트 성공 기준**
```bash
□ 응답: {"success": true, "statusCode": 200}
□ 응답 시간 적절 (30초 이내)
□ 서버 로그 에러 없음
□ 메모리 누수 없음
□ 동시 요청 처리 가능
```

---

### **4단계: E2E 통합 테스트**

#### **E2E 테스트 실행**
```bash
# 단일 매장 테스트
pytest "tests/e2e/test_store_e2e.py::test_store_end_to_end[A]" -v -s

# 전체 매장 테스트
pytest "tests/e2e/test_store_e2e.py" -v -s
```

#### **E2E 테스트 검증 포인트**
```bash
□ 로그인 성공
□ 차량 검색 성공
□ 쿠폰 이력 파싱 정확
□ 할인 계산 정확
□ 쿠폰 적용 성공 (실제 적용 여부)
□ 최종 리소스 정리 완료
```

---

### **5단계: 데이터 검증**

#### **쿠폰 데이터 구조 검증**
```python
# ✅ 올바른 데이터 구조 (모든 매장 공통)
coupon_history = {
    'store_id': 'A',
    'vehicle_id': '1234', 
    'my_history': {'FREE_COUPON': 1, 'PAID_COUPON': 2},
    'total_history': {'FREE_COUPON': 1, 'PAID_COUPON': 2},
    'available_coupons': {
        '30분할인권(무료)': {'car': 1, 'total': 1000},
        '1시간할인권(유료)': {'car': 2, 'total': 500}
    }
}

# ❌ 잘못된 데이터 구조
my_history = {'쿠폰명': 개수}  # 쿠폰명 대신 키 사용해야 함
available_coupons = {'쿠폰명': 개수}  # car/total 구조가 아님
```

#### **할인 계산 검증**
```bash
□ 평일/주말 로직 정확
□ 쿠폰 우선순위 적용 정확
□ 목표 시간 달성 로직 정확
□ 사용가능 쿠폰 수량 고려
□ 기존 적용 쿠폰 차감 정확
```

---

## 🧪 고급 테스트 시나리오

### **스트레스 테스트**
```bash
# 동시 요청 테스트
for i in {1..5}; do
    python interfaces/cli/main.py --store A --vehicle 123$i &
done
wait

# 메모리 사용량 모니터링
ps aux | grep python
```

### **에러 시나리오 테스트**
```bash
□ 잘못된 차량번호로 테스트
□ 네트워크 연결 불안정 상황
□ 브라우저 크래시 상황
□ 쿠폰 부족 상황
□ 페이지 로딩 지연 상황
```

### **경계값 테스트**
```bash
□ 쿠폰 0개 상황
□ 쿠폰 최대 개수 상황  
□ 매우 긴 차량번호
□ 특수문자 포함 차량번호
□ 동시 다중 세션
```

---

## 📊 성능 기준

### **응답 시간 기준**
| 단계 | 목표 시간 | 최대 허용 |
|------|----------|----------|
| 로그인 | 5초 | 10초 |
| 차량 검색 | 3초 | 8초 |
| 쿠폰 조회 | 5초 | 12초 |
| 쿠폰 적용 | 10초 | 20초 |
| 전체 프로세스 | 25초 | 45초 |

### **리소스 사용 기준**
```bash
□ 메모리 사용량 < 500MB
□ CPU 사용률 < 80% (피크 시)
□ 디스크 I/O 정상 범위
□ 네트워크 연결 안정
```

---

## 🚨 실패 패턴 및 대응

### **자주 발생하는 실패 유형**

#### **1. 설정 관련 실패**
```bash
증상: AttributeError: 'StoreConfig' object has no attribute 'discount_types'
대응: 92_store_integration_troubleshooting.mdc → "설정 로더 불일치 문제" 참조
```

#### **2. 파싱 관련 실패**  
```bash
증상: 빈 쿠폰 이력 반환 ({})
대응: 92_store_integration_troubleshooting.mdc → "테이블 구조 파싱 문제" 참조
```

#### **3. 브라우저 관련 실패**
```bash
증상: Target page, context or browser has been closed
대응: 92_store_integration_troubleshooting.mdc → "페이지 안전성 문제" 참조
```

#### **4. 서버 연동 실패**
```bash
증상: CLI는 성공하지만 서버에서 실패
대응: 
  1. 서버 재시작 확인
  2. 인터페이스 일관성 검증
  3. 메서드 시그니처 확인
```

---

## ✅ 테스트 완료 체크리스트

### **출시 전 최종 검증**
```bash
□ CLI 테스트 통과
□ 서버 테스트 통과  
□ E2E 테스트 통과
□ 데이터 구조 검증 완료
□ 성능 기준 충족
□ 에러 시나리오 대응 확인
□ 리소스 정리 확인
□ 로그 품질 확인
□ 문서 업데이트 완료
```

### **배포 후 모니터링 포인트**
```bash
□ 실제 운영 환경에서 정상 동작
□ 메모리 누수 없음
□ 에러율 < 1%
□ 평균 응답 시간 기준 내
□ 사용자 피드백 정상
```

---

## 🔧 도구 및 유틸리티

### **디버깅 도구**
```bash
# 브라우저 디버그 모드
headless=False로 설정하여 화면 확인

# 상세 로깅
logging.level=DEBUG 설정

# 스크린샷 자동 저장
각 단계별 스크린샷 활성화
```

### **모니터링 도구**
```bash
# 시스템 리소스 모니터링
htop, ps aux, netstat

# 로그 실시간 모니터링  
tail -f logs/application.log

# 성능 프로파일링
Python profiler 활용
```

---

## 📚 관련 문서

### **필수 참조 문서**
- **통합 문제 해결**: `92_store_integration_troubleshooting.mdc`
- **에러 정책**: `30_error_policy.mdc`
- **기본 설계**: `04_base_store_design.mdc`

### **구현 참조**
- **E2E 테스트**: `tests/e2e/test_store_e2e.py`
- **설정 관리**: `infrastructure/config/config_manager.py`
- **베이스 크롤러**: `infrastructure/web_automation/base_crawler.py`

---

## 💡 팁 & 베스트 프랙티스

### **효율적인 테스트를 위한 팁**
- 작은 변경사항도 전체 테스트 실행 권장
- 실패 시 즉시 원인 분석, 미루지 말 것
- 테스트 결과를 문서화하여 패턴 파악
- 성공한 설정을 백업해두고 참조용으로 활용

### **품질 향상을 위한 지침**
- 테스트 자동화 스크립트 작성 권장
- 정기적인 전체 매장 회귀 테스트 실행
- 성능 벤치마크 기록 및 추적
- 사용자 시나리오 기반 테스트 케이스 확장