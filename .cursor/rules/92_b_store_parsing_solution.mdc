---
title: "B 매장 할인내역 파싱 문제 해결 방안"
order: 92
category: "reference"
alwaysApply: false
tags: ["b-store", "parsing", "discount-table", "page-safety"]
lastUpdated: "2025-08-16"
description: "B 매장 할인내역 테이블 파싱 실패 문제와 페이지 안전성 확보 해결책"
---

# B 매장 할인내역 파싱 문제 해결 방안

## 🚨 문제 상황

### **발생한 오류**
```
⚠️ 우리 매장 할인 내역 테이블을 찾을 수 없음
⚠️ 전체 할인 내역 테이블을 찾을 수 없음
⚠️ 페이지 구조 분석 오류: Locator.all: Target page, context or browser has been closed
⚠️ 테이블 파싱 오류: Locator.all: Target page, context or browser has been closed
```

### **원인 분석**
1. **페이지 상태 미검증**: 페이지가 닫힌 후에도 파싱 시도
2. **매장별 HTML 구조 차이**: B 매장 고유의 테이블 구조 미반영
3. **안전성 검사 부족**: Playwright 페이지 생명주기 관리 미흡

---

## ✅ 해결 방안

### **1. 페이지 안전성 검사 패턴**

#### **페이지 상태 확인 필수 패턴**
```python
async def _parse_current_applied_coupons(self):
    try:
        # 🔒 STEP 1: 페이지 닫힘 상태 확인
        if self.page.is_closed():
            print("     ⚠️ 페이지가 이미 닫혔습니다 - 쿠폰 파싱 불가")
            return {}, {}
        
        # 🔒 STEP 2: URL 접근 가능성 확인
        try:
            current_url = self.page.url
            print(f"     🔍 현재 페이지 URL: {current_url}")
        except Exception as e:
            print(f"     ⚠️ 페이지 상태 확인 실패: {str(e)}")
            return {}, {}
        
        # 실제 파싱 로직 진행...
    except Exception as e:
        print(f"   ⚠️ 현재 쿠폰 파싱 실패: {str(e)}")
        return {}, {}
```

#### **스크린샷 저장 시 안전성 검사**
```python
async def _save_screenshot(self, step_name):
    try:
        if self.page and not self.page.is_closed():
            screenshot_path = f"test_screenshots/{step_name}.png"
            await self.page.screenshot(path=screenshot_path)
            print(f"   📸 스크린샷 저장: {screenshot_path}")
        else:
            print(f"   ⚠️ 페이지가 닫혀서 스크린샷을 저장할 수 없음: {step_name}")
    except Exception as e:
        print(f"   ⚠️  스크린샷 저장 실패: {str(e)}")
```

---

### **2. B 매장 HTML 구조 매핑**

#### **B 매장 고유 테이블 구조**
```python
# B 매장 할인내역 테이블 구조에 맞는 셀렉터
discount_selectors = [
    "tr.ev_dhx_skyblue",     # B 매장 기본 행 (짝수)
    "tr.odd_dhx_skyblue",    # B 매장 홀수 행
    "tr.rowselected",        # 선택된 행
    "#gridDtl tr",           # 할인내역 그리드 내 행
    ".gridbox tr"            # 그리드박스 내 행
]

# B 매장 쿠폰 매핑 정보
coupon_key_mapping = {
    "무료 1시간할인": "FREE_COUPON",
    "유료 30분할인": "PAID_COUPON"
}
```

#### **B 매장 테이블 데이터 구조**
```
행 구조: 번호(0) | 할인값(1) | 등록자(2) | 등록일(3)
예시: "1 | 유료 30분할인 | 215(이수열) | 2025-08-16 08:59:07.977"

파싱 대상: cell_texts[1]에서 쿠폰 이름 추출
- "무료 1시간할인" → FREE_COUPON
- "유료 30분할인" → PAID_COUPON
```

---

### **3. 매장별 HTML 구조 차이점**

#### **🏪 A 매장 vs B 매장 vs C 매장 비교**

| 매장 | 테이블 ID | 행 클래스 | 데이터 위치 | 수량 처리 |
|------|-----------|-----------|-------------|-----------|
| **A** | `#myDcList`, `#allDcList` | 일반 `tr` | cell[2] (할인권명) | cell[3] (수량) |
| **B** | 없음 (클래스 기반) | `tr.ev_dhx_skyblue` | cell[1] (할인값) | 항상 1개 |
| **C** | `tbody[id='discountlist']` | 일반 `tr` | cell[2] (할인권명) | cell[3] (수량) |

#### **매장별 파싱 로직 분기**
```python
# 공통 쿠폰 계산기의 매장 구조 감지 로직
# B매장 패턴: 2번째 칼럼에 "무료 1시간할인", "유료 30분할인" 등이 있음
if any(name in cell_texts[1] for name in ["무료 1시간할인", "유료 30분할인", "무료", "유료"]):
    coupon_cell = cell_texts[1]  # B매장: 2번째 셀 (할인값)
    quantity = 1  # B매장은 항상 1개씩

# C매장 패턴: 3번째 칼럼에 할인권명이 있음
elif any(name in cell_texts[2] for name in ["무료", "유료", "할인권"]):
    coupon_cell = cell_texts[2]  # C매장: 3번째 셀 (할인권명)
    quantity_cell = cell_texts[3]  # C매장: 4번째 셀 (수량)
    # 수량 숫자 추출 ("1매" -> 1)
    quantity_match = re.search(r'(\d+)', quantity_cell)
    quantity = int(quantity_match.group(1)) if quantity_match else 1
```

---

## 🎯 검증된 해결 결과

### **수정 전 vs 수정 후**

#### **❌ 수정 전**
```
⚠️ 우리 매장 할인 내역 테이블을 찾을 수 없음
⚠️ 전체 할인 내역 테이블을 찾을 수 없음
⚠️ 페이지 구조 분석 오류: Target page, context or browser has been closed
```

#### **✅ 수정 후**
```
🔍 현재 페이지 URL: https://a15878.parkingweb.kr/discount/registration
🔍 현재 적용된 쿠폰 파싱 시작...
📊 할인 내역 테이블 발견: tr.ev_dhx_skyblue (3개 행)
📝 행 2: 1 | 유료 30분할인 | 215(이수열) | 2025-08-16 09:20:05.203
✅ 적용된 쿠폰 발견: 유료 30분할인 1개 -> PAID_COUPON
📝 행 3: 3 | 무료 1시간할인 | 215(이수열) | 2025-08-16 01:30:46.203
✅ 적용된 쿠폰 발견: 무료 1시간할인 1개 -> FREE_COUPON
📊 현재 적용된 쿠폰 내역:
  - 매장 내역: {'PAID_COUPON': 1, 'FREE_COUPON': 1}
  - 전체 내역: {'PAID_COUPON': 1, 'FREE_COUPON': 1}
```

---

## 📋 매장별 대응 체크리스트

### **✅ 새 매장 할인내역 파싱 구현 시**

#### **1. HTML 구조 분석**
```bash
□ 테이블 ID/클래스 확인
□ 행(tr) 클래스명 확인  
□ 데이터 셀 위치 매핑
□ 쿠폰명 표시 방식 확인
□ 수량 표시 방식 확인
```

#### **2. 페이지 안전성 구현**
```bash
□ page.is_closed() 체크 구현
□ URL 접근 가능성 확인
□ 예외 처리 포함
□ 스크린샷 저장 시 안전성 검사
```

#### **3. 공통 계산기 호환성**
```bash
□ coupon_key_mapping 정의
□ discount_selectors 정의
□ 매장 구조 감지 로직 추가
□ 기존 매장과 데이터 형식 통일
```

#### **4. 테스트 검증**
```bash
□ 빈 테이블 상황 테스트
□ 기존 쿠폰 적용 상황 테스트
□ 새 쿠폰 적용 후 재파싱 테스트
□ 페이지 닫힘 상황 테스트
```

---

## 🚫 주의사항

### **❌ 절대 하지 말 것**
- 페이지 상태 확인 없이 DOM 조작 시도
- 매장별 HTML 구조 차이 무시
- 하드코딩된 셀렉터만 사용 (복수 셀렉터 필수)
- 예외 처리 없는 파싱 로직

### **✅ 반드시 해야 할 것**
- 모든 DOM 접근 전 페이지 상태 검증
- 매장별 HTML 구조에 맞는 셀렉터 사용
- 공통 계산기 호환성 유지
- 충분한 예외 처리 및 로깅

---

## 📚 관련 파일

- **테스트 파일**: `test_b_store_ui_2.py`
- **공통 계산기**: `shared/utils/common_coupon_calculator.py`
- **B 매장 크롤러**: `infrastructure/web_automation/store_crawlers/b_store_crawler.py`
- **B 매장 설정**: `infrastructure/config/store_configs/b_store_config.yaml`

이 해결 방안을 통해 B 매장 할인내역 파싱이 안정적으로 동작하며, 다른 매장에서도 동일한 패턴을 적용할 수 있습니다.