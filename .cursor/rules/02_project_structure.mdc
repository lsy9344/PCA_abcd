---
title: "PCA_abcd 프로젝트 구조 및 모듈 레이아웃"
order: 2
category: "architecture"
alwaysApply: true
tags: ["structure", "architecture", "modules"]
lastUpdated: "2024-01-15"
description: "클린 아키텍처 기반 프로젝트 구조와 각 모듈의 역할"
---

# 프로젝트 구조 및 모듈 레이아웃

## 🏗️ 클린 아키텍처 기반 구조

```
project_root/
├── core/                           # 핵심 도메인 로직 (클린 아키텍처의 중심)
│   ├── domain/                     # 도메인 계층
│   │   ├── models/                 # 도메인 모델 (예: coupon.py, store.py, vehicle.py, discount_policy.py)
│   │   └── repositories/           # 리포지토리 인터페이스 (예: store_repository.py)
│   └── application/                # 애플리케이션 계층
│       ├── use_cases/              # 유스케이스 (예: apply_coupon_use_case.py)
│       └── dto/                    # 데이터 전송 객체 (예: automation_dto.py)
├── infrastructure/                 # 인프라스트럭처 계층 (외부 시스템과의 상호작용)
│   ├── config/                     # 설정 관리 (YAML 기반)
│   │   ├── base_config.yaml        # 공통 설정
│   │   └── store_configs/          # 매장별 설정 (예: a_store_config.yaml, b_store_config.yaml)
│   ├── web_automation/             # 웹 자동화 (Playwright 구현)
│   │   ├── base_crawler.py         # 기본 크롤러 (공통 웹 액션)
│   │   └── store_crawlers/         # 매장별 크롤러 구현 (예: a_store_crawler.py, b_store_crawler.py)
│   ├── notifications/              # 알림 시스템 (예: notification_service.py, telegram_adapter.py)
│   ├── logging/                    # 로깅 시스템 (예: structured_logger.py)
│   └── factories/                  # 의존성 주입을 위한 팩토리 (예: automation_factory.py)
├── interfaces/                     # 인터페이스 계층 (사용자 및 외부 시스템과의 접점)
│   ├── api/                        # API 엔드포인트 (AWS Lambda 핸들러)
│   │   └── lambda_handler.py
│   └── cli/                        # CLI 인터페이스
│       └── main.py
├── shared/                         # 공유 컴포넌트 (범용 유틸리티, 예외 등)
│   ├── exceptions/                 # 커스텀 예외 (예: automation_exceptions.py)
│   └── utils/                      # 유틸리티 함수 (예: date_utils.py)
├── doc/                            # 시스템 관련 문서 (유지)
├── reference/                      # 참조 자료 (유지)
├── result_logs/                    # 실행 로그 저장소 (유지)
├── venv/                           # Python 가상 환경 (유지)
├── .cursor/                        # Cursor 설정 파일 (유지)
├── README.md                       # 프로젝트 메인 설명서 (업데이트 완료)
├── MIGRATION_GUIDE.md              # 기존 시스템에서 마이그레이션 가이드 (새로 생성)
└── requirements.txt                # 프로젝트 의존성 목록 (업데이트 완료)
```

## 📋 각 계층의 역할

### 🎯 Core (핵심 도메인)
- **Domain Models**: 비즈니스 규칙과 도메인 로직
- **Use Cases**: 애플리케이션의 주요 기능과 워크플로우
- **Repository Interfaces**: 데이터 액세스 추상화

### 🔧 Infrastructure (인프라스트럭처)
- **Web Automation**: Playwright 기반 웹 자동화
- **Configuration**: YAML 기반 설정 관리
- **Notifications**: 텔레그램 등 알림 시스템
- **Logging**: 구조화된 로깅 시스템

### 🌐 Interfaces (인터페이스)
- **API**: AWS Lambda 핸들러
- **CLI**: 명령줄 인터페이스

### 🤝 Shared (공유)
- **Utilities**: 공통 유틸리티 함수
- **Exceptions**: 프로젝트 전용 예외

## 🎨 설계 원칙

### 1. **의존성 방향**
```
Interfaces → Application → Domain
Infrastructure → Application → Domain
```

### 2. **매장별 확장성**
- 새로운 매장 추가 시 `infrastructure/web_automation/store_crawlers/` 에 새 크롤러 추가
- `infrastructure/config/store_configs/` 에 설정 파일 추가
- 핵심 로직은 변경하지 않음

### 3. **테스트 용이성**
- 각 계층이 독립적으로 테스트 가능
- 의존성 주입을 통한 Mock 객체 사용 가능

## 🔗 모듈 간 관계

### **자동화 실행 흐름**
1. `interfaces/api/lambda_handler.py` → 요청 수신
2. `core/application/use_cases/apply_coupon_use_case.py` → 비즈니스 로직 실행
3. `infrastructure/web_automation/store_crawlers/` → 웹 자동화 수행
4. `infrastructure/notifications/` → 결과 알림

### **설정 및 의존성**
- `infrastructure/config/` → 모든 설정 중앙 관리
- `infrastructure/factories/` → 객체 생성 및 의존성 주입
- `shared/utils/` → 공통 기능 제공

---

이 구조는 **클린 아키텍처 원칙**을 따라 유지보수성, 테스트 용이성, 확장성을 보장합니다.