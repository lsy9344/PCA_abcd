---
title: "에러 처리 및 로깅 정책"
order: 30
category: "implementation"
alwaysApply: true
tags: ["error", "logging", "policy", "unicode"]
lastUpdated: "2024-01-15"
description: "에러 처리, 로깅, 재시도 정책 및 Windows Unicode 문제 해결"
---

# 에러 처리, 로깅, 재시도 정책 (AWS CloudWatch Logs 비용 최적화)

## 1. 기본 원칙

-   **모든 단계 에러 처리**: Playwright의 모든 주요 동작(페이지 이동, 클릭, 입력 등)은 `try-except` 블록으로 감싸 예외를 처리한다.
-   **최소한의 로그 기록**: 에러 발생 시, **핵심 정보만 간결하게** 로그를 기록한다. CloudWatch Logs 비용 절감을 위해 불필요한 상세 정보는 제외한다.
    -   필수 정보: `[매장][단계] 에러코드` (예: `[A][로그인] FAIL_AUTH`, `[B][쿠폰조회] FAIL_PARSE`)
    -   상세 에러 메시지는 텔레그램 알림에만 포함하고, 로그에는 간단한 코드만 기록
-   **선별적 재시도**: 실패 시 무조건 재시도하는 대신, 네트워크 오류 등 일시적일 가능성이 있는 경우에만 1~2회 재시도를 고려한다.
-   **Unicode 안전 로깅**: Windows 환경에서 발생하는 cp949 인코딩 문제를 방지하기 위해 이모지나 특수 문자 사용 금지

## 2. Windows 환경 Unicode 로깅 문제 해결

### 2.1 핵심 문제
```
UnicodeEncodeError: 'cp949' codec can't encode character '\U0001f30d' in position 36: illegal multibyte sequence
```
- **원인**: Windows 콘솔의 기본 인코딩(cp949)이 이모지 문자를 처리하지 못함
- **발생 위치**: 로그 메시지에 이모지가 포함될 때

### 2.2 안전한 로그 메시지 패턴

#### **❌ 문제가 되는 코드**
```python
self.logger.info(f"🚀 매장 자동화 시작")
self.logger.info(f"✅ 로그인 성공")
self.logger.info(f"🎫 쿠폰 적용 시작")
self.logger.info(f"🌍 총 적용 쿠폰: {data}")
self.logger.info(f"📊 할인 내역 분석")
```

#### **✅ 올바른 코드**
```python
self.logger.info(f"[시작] 매장 자동화")
self.logger.info(f"[성공] 로그인 완료")
self.logger.info(f"[쿠폰] 적용 시작")
self.logger.info(f"총 적용 쿠폰 (전체): {data}")
self.logger.info(f"[분석] 할인 내역")
```

### 2.3 로그 메시지 표준화 규칙

#### **상태 표시**
```python
# ✅ 텍스트 접두사 사용
self.logger.info("[성공] 로그인 완료")
self.logger.info("[실패] 차량 검색 오류")
self.logger.info("[경고] 쿠폰 부족")
self.logger.info("[정보] 처리 진행 중")
```

#### **카테고리 표시**
```python
# ✅ 접두사 사용
self.logger.info("[시작] 매장 자동화")
self.logger.info("[검색] 차량번호 조회")
self.logger.info("[쿠폰] 적용 프로세스")
self.logger.info("[분석] 할인 내역")
```

### 2.4 이모지 → 텍스트 매핑 테이블
```python
EMOJI_TO_TEXT = {
    "🚀": "[시작]",
    "✅": "[성공]",
    "❌": "[실패]", 
    "⚠️": "[경고]",
    "🔍": "[검색]",
    "🎫": "[쿠폰]",
    "📊": "[분석]",
    "🌍": "[전체]",
    "🏪": "[매장]",
    "💰": "[보유]",
    "ℹ️": "[정보]"
}
```

## 3. AWS CloudWatch Logs 비용 최적화 전략

### 3.1 로그 레벨 최적화
-   **프로덕션 환경**: `WARNING` 레벨 이상만 기록 (`logger.setLevel(logging.WARNING)`)
-   **개발/테스트 환경**: `INFO` 레벨까지 허용
-   **디버깅 필요시**: 환경변수로 `DEBUG` 레벨 활성화 가능

### 3.2 로그 보존 기간 설정
-   **에러 로그**: 30일 보존 (문제 해결 및 패턴 분석용)
-   **일반 실행 로그**: 7일 보존 (최근 실행 상태 확인용)
-   **디버그 로그**: 1일 보존 (즉시 문제 해결용)

### 3.3 로그 메시지 간소화
-   **긴 에러 메시지 축약**: 핵심 키워드만 포함
-   **반복 정보 제거**: 매번 동일한 정보는 생략
-   **구조화된 로깅**: JSON 형식 사용 시 필드명 최소화
-   **이모지 제거**: Windows cp949 호환성을 위해 ASCII 문자만 사용

## 4. 실패 단계별 처리 방안 (비용 최적화)

| 단계                 | 실패 시 로그 기록                                                                                                                                                               | 텔레그램 알림 | 재시도 정책 |
| ----- | ---- | ---- | ----- |
| **로그인**           | `[매장][로그인] FAIL_AUTH` (상세 내용은 텔레그램만)                                                                                                                             | ✅            | 1회 재시도  |
| **차량 검색**        | "검색된 차량 없음"은 `[매장][차량검색] NO_VEHICLE`로 기록.<br>그 외 에러는 `[매장][차량검색] FAIL_SEARCH`                                                                       | ✅ (에러시만) | 없음        |
| **쿠폰 이력 조회**   | `[매장][쿠폰조회] FAIL_PARSE` (어떤 셀렉터 실패했는지는 텔레그램만)                                                                                                             | ✅            | 없음        |
| **쿠폰 적용**        | `[매장][쿠폰적용] FAIL_APPLY` (상세 내용은 텔레그램만)                                                                                                                          | ✅            | 없음        |
| **팝업 처리 등 부가 기능** | 로그 기록 없음 (텔레그램 알림도 없음)                                                                                                                                           | ❌            | 없음        |

## 5. 텔레그램 알림 정책 (로그 대체 수단)

-   **실패 시 즉시 알림**: **프로세스가 중단되는 모든 종류의 에러**가 발생했을 때 텔레그램으로 상세 정보 전송
-   **텔레그램에만 상세 정보 포함**: CloudWatch Logs 비용 절감을 위해 상세 에러 메시지는 텔레그램에만 기록
-   **필수 정보 포함**:
    -   **실패 원인**: 발생한 에러의 상세 메시지 (로그에는 간단한 코드만)
    -   **실패 매장**: 어느 매장에서 실패했는지
    -   **실패 차량번호**: 어떤 차량 작업 중이었는지
    -   **실패 시간**: 에러 발생 시각

### 텔레그램 메시지 예시 (상세 정보)

```
🚨 쿠폰 자동화 실패 🚨

매장: B
차량: 12가3456
단계: 쿠폰조회
시간: 2023/10/27 15:30:10
원인: 'ul.discount-list' 요소를 찾을 수 없습니다.
```

### CloudWatch 로그 예시 (간소화)

```
[B][쿠폰조회] FAIL_PARSE
```

## 6. Unicode 안전 로깅 함수

### 6.1 안전한 로거 래퍼
```python
def safe_log_info(self, message: str):
    """Unicode 안전 로그 출력"""
    try:
        # 이모지 제거
        clean_message = self._remove_emojis(message)
        self.logger.info(clean_message)
    except UnicodeEncodeError:
        # 안전한 ASCII 변환
        ascii_message = message.encode('ascii', errors='ignore').decode('ascii')
        self.logger.info(f"[UNICODE_ERROR] {ascii_message}")

def _remove_emojis(self, text: str) -> str:
    """텍스트에서 이모지 제거"""
    import re
    # 이모지 패턴 제거
    emoji_pattern = re.compile(
        "["
        "\U0001F600-\U0001F64F"  # 감정 표현
        "\U0001F300-\U0001F5FF"  # 기호 및 그림
        "\U0001F680-\U0001F6FF"  # 교통 및 지도
        "\U0001F1E0-\U0001F1FF"  # 국기
        "]+",
        flags=re.UNICODE
    )
    return emoji_pattern.sub('', text)
```

---

## 7. Playwright 페이지 상태 안전성 검사 패턴

### 7.1 페이지 생명주기 관리 문제
Playwright 자동화에서 페이지가 예상보다 일찍 닫히거나 무효화되어 발생하는 오류들:
```
Target page, context or browser has been closed
Cannot read properties of null (reading 'url')
Page has been closed
```

### 7.2 필수 안전성 검사 패턴

#### **🔒 모든 DOM 접근 전 페이지 상태 확인**
```python
async def _parse_current_applied_coupons(self):
    try:
        # STEP 1: 페이지 닫힘 상태 확인
        if self.page.is_closed():
            print("     ⚠️ 페이지가 이미 닫혔습니다 - 파싱 불가")
            return {}, {}
        
        # STEP 2: URL 접근 가능성 확인
        try:
            current_url = self.page.url
            print(f"     🔍 현재 페이지 URL: {current_url}")
        except Exception as e:
            print(f"     ⚠️ 페이지 상태 확인 실패: {str(e)}")
            return {}, {}
        
        # 안전한 상태에서 실제 DOM 조작 진행...
        
    except Exception as e:
        print(f"   ⚠️ 파싱 실패: {str(e)}")
        return {}, {}
```

#### **🔒 스크린샷 저장 시 안전성 검사**
```python
async def _save_screenshot(self, step_name):
    try:
        if self.page and not self.page.is_closed():
            screenshot_path = f"screenshots/{step_name}.png"
            await self.page.screenshot(path=screenshot_path)
            self.logger.info(f"[성공] 스크린샷 저장: {screenshot_path}")
        else:
            self.logger.warning(f"[경고] 페이지 닫힘으로 스크린샷 불가: {step_name}")
    except Exception as e:
        self.logger.error(f"[실패] 스크린샷 저장 오류: {str(e)}")
```

#### **🔒 최종 검증 단계 안전성 검사**
```python
# finally 블록에서의 안전한 정리 작업
finally:
    try:
        if not self.page.is_closed():
            # 최종 검증 수행
            await self._final_verification()
            await self._save_screenshot("final_state")
        else:
            print("   ⚠️ 페이지가 닫혀서 최종 검증을 건너뜁니다")
    except Exception as verification_error:
        print(f"   ⚠️ 최종 검증 실패: {str(verification_error)}")
```

### 7.3 페이지 상태 체크 순서

#### **✅ 올바른 안전성 검사 순서**
```python
# 1. 객체 존재 확인
if not self.page:
    return False

# 2. 페이지 닫힘 상태 확인  
if self.page.is_closed():
    return False

# 3. URL 접근 가능성 확인
try:
    current_url = self.page.url
except Exception:
    return False

# 4. DOM 요소 접근 수행
# 이제 안전하게 locator 사용 가능
```

#### **❌ 잘못된 패턴**
```python
# 바로 DOM 접근 시도 (위험)
try:
    rows = await self.page.locator("tr").all()  # 페이지가 닫혔을 수 있음
except Exception:
    pass  # 너무 늦은 예외 처리
```

### 7.4 에러 코드 표준화

| 상황 | 에러 코드 | 로그 메시지 |
|------|-----------|-------------|
| 페이지 닫힘 | `PAGE_CLOSED` | `[매장][단계] PAGE_CLOSED` |
| URL 접근 불가 | `PAGE_INVALID` | `[매장][단계] PAGE_INVALID` |
| DOM 요소 없음 | `ELEMENT_NOT_FOUND` | `[매장][단계] ELEMENT_NOT_FOUND` |
| 타임아웃 | `TIMEOUT` | `[매장][단계] TIMEOUT` |

### 7.5 체크리스트: 안전한 Playwright 코드

#### **✅ DOM 접근 전 필수 체크**
```bash
□ self.page 객체 존재 확인
□ self.page.is_closed() 호출
□ self.page.url 접근 가능성 확인
□ 예외 처리 블록으로 감싸기
□ 실패 시 안전한 기본값 반환
```

#### **✅ 스크린샷/파일 저장 시**
```bash
□ 페이지 상태 확인 후 저장
□ 실패 시 경고 메시지만 출력
□ 프로세스 중단하지 않음
```

#### **✅ finally 블록 처리**
```bash
□ 정리 작업 전 페이지 상태 확인
□ 페이지 닫힘 시 정리 작업 생략
□ 예외 발생해도 프로세스 계속 진행
```

이 패턴을 통해 Playwright 페이지 생명주기로 인한 예기치 않은 오류를 방지하고 안정적인 자동화를 구현할 수 있습니다.

---

이 문서는 AWS CloudWatch Logs 비용을 최소화하면서도 시스템의 안정성과 모니터링 기능을 유지하고, Windows 환경에서도 안정적인 로깅이 가능하도록 하는 최적화된 로깅 전략을 제시한다.