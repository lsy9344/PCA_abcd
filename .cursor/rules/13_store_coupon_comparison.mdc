---
title: "매장별 쿠폰 구성 및 차이점 비교"
order: 13
category: "business_logic"
tags: ["store", "coupon", "comparison", "configuration"]
lastUpdated: "2024-01-27"
description: "A, B, C, D 매장별 쿠폰 종류, 적용 시간, 특수 조건 종합 비교"
---

# 매장별 쿠폰 구성 및 차이점 비교

> **이 문서는 각 매장의 쿠폰 구성과 특수 조건을 한눈에 비교할 수 있도록 정리한 종합 가이드입니다.**

---

## 🏪 **매장별 쿠폰 구성 요약표**

| 구분 | A 매장 | B 매장 | C 매장 | D 매장 |
|------|--------|--------|--------|--------|
| **무료 쿠폰** | 1시간 (60분) | 1시간 (60분) | **2시간 (120분)** ⭐ | 1시간 (60분) |
| **유료 쿠폰** | 1시간 (60분) | **30분** ⭐ | 1시간 (60분) | **30분** ⭐ |
| **주말 쿠폰** | 1시간 (60분) | ❌ (PAID로 대체) | ❌ (PAID로 대체) | ❌ (PAID로 대체) |
| **목표 시간** | 평일 3시간, 주말 2시간 | 평일 3시간, 주말 2시간 | 평일 3시간, 주말 2시간 | 평일 3시간, 주말 2시간 |

---

## 📊 **매장별 상세 분석**

### **A 매장 (표준 기준)**
```yaml
쿠폰 구성:
  - 무료: "30분할인권(무료)" → 실제 60분 적용
  - 유료: "1시간할인권(유료)" → 60분
  - 주말: "1시간주말할인권(유료)" → 60분

특징:
  - 가장 표준적인 구성 (1시간 기준)
  - 주말 전용 쿠폰 보유
  - 다른 매장의 기준점 역할
```

### **B 매장 (30분 유료 단위)**
```yaml
쿠폰 구성:
  - 무료: "무료 1시간할인" → 60분
  - 유료: "유료 30분할인 (판매 : 300)" → 30분 ⭐

특징:
  - 유료 쿠폰이 30분 단위 (duration_minutes: 30)
  - 주말 전용 쿠폰 없음 → PAID로 fallback
  - 동적 계산 알고리즘이 자동으로 처리 (보정 불필요)
```

### **C 매장 (2시간 무료 특화)**
```yaml
쿠폰 구성:
  - 무료: "무료 2시간할인" → 120분 ⭐
  - 유료: "1시간 유료할인권" → 60분

특징:
  - 무료 쿠폰이 2시간 (특수)
  - 주말에 무료 쿠폰만으로 목표 달성 가능
  - 환경변수 기반 로그인 정보 관리
```

### **D 매장 (B 매장과 동일)**
```yaml
쿠폰 구성:
  - 무료: "1시간 무료" → 60분
  - 유료: "30분 유료" → 30분 ⭐

특징:
  - B 매장과 동일한 30분 유료 구조
  - 주말 전용 쿠폰 없음 → PAID로 fallback
  - 비밀번호 만료 팝업 처리 추가
```

---

## ⚠️ **매장별 특수 조건 및 주의사항**

### **1. 30분 유료 쿠폰 매장 (B, D)**

#### **자동 계산 처리**
```python
# B/D 매장 계산 - 동적 알고리즘이 자동 처리
target_minutes = 180  # 평일 3시간
remaining_minutes = 120  # 무료 1시간 적용 후 남은 시간

# 동적 계산: ceil(120분 / 30분) = 4개 (자동 계산)
needed_count = math.ceil(remaining_minutes / config.duration_minutes)  # 4개
```

#### **결과 검증**
```python
# 검증: 60분(무료) + 120분(30분×4개) = 180분 ✅
total_applied = 60 + (30 * 4)  # 180분 = 목표 달성
```

### **2. 2시간 무료 쿠폰 매장 (C)**

#### **주말 시나리오**
```python
# C 매장 주말 (목표 2시간)
target_minutes = 120
free_2hour_applied = 120  # 무료 2시간 쿠폰 1개

# 결과: 목표 정확히 달성, 추가 유료 쿠폰 불필요
needed_paid = 0
```

#### **평일 시나리오**
```python
# C 매장 평일 (목표 3시간)
target_minutes = 180
free_2hour_applied = 120  # 무료 2시간 쿠폰 1개
remaining_minutes = 60   # 1시간 부족

# 결과: 유료 1시간 쿠폰 1개 추가 필요
needed_paid = math.ceil(60 / 60)  # 1개
```

### **3. 주말 쿠폰 대체 로직 (B, C, D)**

```python
# 주말 쿠폰이 없는 매장의 fallback 로직
if not is_weekday and not has_weekend_coupon:
    # WEEKEND 타입 대신 PAID 타입 사용
    coupon_type = 'PAID'  # WEEKEND → PAID 대체
    
    print("[정보] 주말 전용 쿠폰 없음 → 유료 쿠폰으로 대체 적용")
```

---

## 🔧 **개발 시 고려사항**

### **1. 새로운 매장 추가 시**

#### **설정 파일 작성 체크리스트**
- [ ] `duration_minutes`: 각 쿠폰의 정확한 시간 (분 단위)
- [ ] `type`: FREE, PAID, WEEKEND 중 적절한 타입 선택
- [ ] `priority`: 같은 타입 내에서의 우선순위 (낮을수록 우선)
- [ ] `policy`: 평일/주말 목표 시간 설정

#### **특수 조건 처리**
```python
# 예: 15분 유료 쿠폰 매장이 추가된다면
coupons:
  PAID_COUPON:
    name: "15분 유료쿠폰"
    type: "PAID"
    duration_minutes: 15  # ← 어떤 시간이든 설정 가능
    priority: 1

# 동적 계산 알고리즘이 자동으로 처리
needed_count = math.ceil(remaining_minutes / 15)
```

### **2. 계산 검증 시 체크포인트**

```python
def validate_store_specific_calculation(store_id, result):
    """매장별 조건 검증 (동적 계산 알고리즘 신뢰)"""
    
    # 모든 매장은 duration_minutes 기반으로 자동 계산됨
    # 별도의 매장별 특수 검증 로직 불필요
    
    if store_id == "C":
        # 2시간 무료 쿠폰 매장: 주말에 무료쿠폰만으로 달성 가능
        if not is_weekday:
            assert result.get('FREE_2HOUR', 0) <= 1
            
    elif store_id == "A":
        # 표준 매장: 주말 쿠폰 사용 확인
        if not is_weekday:
            weekend_used = result.get('WEEKEND_1HOUR', 0)
            paid_used = result.get('PAID_1HOUR', 0)
            # 주말에는 WEEKEND 또는 PAID 중 하나만 사용
    
    # B, D 매장: 특별한 검증 로직 불필요 (자동 처리됨)
```

---

## 📈 **확장성 고려사항**

### **미래 매장 추가 시나리오**

#### **E 매장 (가상 예시)**
```yaml
# 예: 90분 무료, 45분 유료 쿠폰 매장
coupons:
  FREE_COUPON:
    name: "90분 무료할인"
    type: "FREE"
    duration_minutes: 90  # ← 특수한 시간도 가능
    priority: 0
  PAID_COUPON:
    name: "45분 유료쿠폰"
    type: "PAID" 
    duration_minutes: 45  # ← 특수한 시간도 가능
    priority: 1
```

#### **자동 처리 가능**
- 현재 동적 계산 알고리즘은 어떤 시간이든 자동 처리
- 코드 수정 없이 설정 파일만 추가하면 완료
- 특수 보정 로직이 필요한 경우에만 추가 개발

---

## 🎯 **요약 및 핵심 포인트**

### **현재 구현 상태: ✅ 우수**
1. **설정 기반 아키텍처**: 모든 매장의 쿠폰 정보가 YAML에 명확히 정의됨
2. **동적 계산 알고리즘**: 매장별 차이를 자동으로 처리
3. **확장성**: 새로운 매장/쿠폰 추가 시 코드 변경 최소화

### **특수 매장 요약**
- **B, D 매장**: 30분 유료 쿠폰 (duration_minutes: 30으로 자동 처리)
- **C 매장**: 2시간 무료 쿠폰 (duration_minutes: 120으로 주말 목표 달성)
- **A 매장**: 표준 기준 (1시간 단위, 주말 쿠폰 보유)

### **개발자 가이드**
1. 새 매장 추가 시 이 문서의 비교표 업데이트 필수
2. 특수 조건이 있는 경우 계산 검증 로직 추가
3. 매장별 차이점을 코드 주석에 명시

---

**이 문서는 매장별 차이점 이해와 새로운 매장 추가 시 핵심 참고 자료입니다.**